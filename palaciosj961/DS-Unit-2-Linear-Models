{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "name": "Copy of LS_DS_222_assignment.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/palaciosj961/DS-Unit-2-Linear-Models/blob/master/palaciosj961/DS-Unit-2-Linear-Models\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AV2bvkqdQ5k7",
        "colab_type": "text"
      },
      "source": [
        "Lambda School Data Science\n",
        "\n",
        "*Unit 2, Sprint 2, Module 2*\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "7IXUfiQ2UKj6"
      },
      "source": [
        "# Random Forests\n",
        "\n",
        "## Assignment\n",
        "- [ ] Read [“Adopting a Hypothesis-Driven Workflow”](https://outline.com/5S5tsB), a blog post by a Lambda DS student about the Tanzania Waterpumps challenge.\n",
        "- [ ] Continue to participate in our Kaggle challenge.\n",
        "- [ ] Define a function to wrangle train, validate, and test sets in the same way. Clean outliers and engineer features.\n",
        "- [ ] Try Ordinal Encoding.\n",
        "- [ ] Try a Random Forest Classifier.\n",
        "- [ ] Submit your predictions to our Kaggle competition. (Go to our Kaggle InClass competition webpage. Use the blue **Submit Predictions** button to upload your CSV file. Or you can use the Kaggle API to submit your predictions.)\n",
        "- [ ] Commit your notebook to your fork of the GitHub repo.\n",
        "\n",
        "## Stretch Goals\n",
        "\n",
        "### Doing\n",
        "- [ ] Add your own stretch goal(s) !\n",
        "- [ ] Do more exploratory data analysis, data cleaning, feature engineering, and feature selection.\n",
        "- [ ] Try other [categorical encodings](https://contrib.scikit-learn.org/categorical-encoding/).\n",
        "- [ ] Get and plot your feature importances.\n",
        "- [ ] Make visualizations and share on Slack.\n",
        "\n",
        "### Reading\n",
        "\n",
        "Top recommendations in _**bold italic:**_\n",
        "\n",
        "#### Decision Trees\n",
        "- A Visual Introduction to Machine Learning, [Part 1: A Decision Tree](http://www.r2d3.us/visual-intro-to-machine-learning-part-1/),  and _**[Part 2: Bias and Variance](http://www.r2d3.us/visual-intro-to-machine-learning-part-2/)**_\n",
        "- [Decision Trees: Advantages & Disadvantages](https://christophm.github.io/interpretable-ml-book/tree.html#advantages-2)\n",
        "- [How a Russian mathematician constructed a decision tree — by hand — to solve a medical problem](http://fastml.com/how-a-russian-mathematician-constructed-a-decision-tree-by-hand-to-solve-a-medical-problem/)\n",
        "- [How decision trees work](https://brohrer.github.io/how_decision_trees_work.html)\n",
        "- [Let’s Write a Decision Tree Classifier from Scratch](https://www.youtube.com/watch?v=LDRbO9a6XPU)\n",
        "\n",
        "#### Random Forests\n",
        "- [_An Introduction to Statistical Learning_](http://www-bcf.usc.edu/~gareth/ISL/), Chapter 8: Tree-Based Methods\n",
        "- [Coloring with Random Forests](http://structuringtheunstructured.blogspot.com/2017/11/coloring-with-random-forests.html)\n",
        "- _**[Random Forests for Complete Beginners: The definitive guide to Random Forests and Decision Trees](https://victorzhou.com/blog/intro-to-random-forests/)**_\n",
        "\n",
        "#### Categorical encoding for trees\n",
        "- [Are categorical variables getting lost in your random forests?](https://roamanalytics.com/2016/10/28/are-categorical-variables-getting-lost-in-your-random-forests/)\n",
        "- [Beyond One-Hot: An Exploration of Categorical Variables](http://www.willmcginnis.com/2015/11/29/beyond-one-hot-an-exploration-of-categorical-variables/)\n",
        "- _**[Categorical Features and Encoding in Decision Trees](https://medium.com/data-design/visiting-categorical-features-and-encoding-in-decision-trees-53400fa65931)**_\n",
        "- _**[Coursera — How to Win a Data Science Competition: Learn from Top Kagglers — Concept of mean encoding](https://www.coursera.org/lecture/competitive-data-science/concept-of-mean-encoding-b5Gxv)**_\n",
        "- [Mean (likelihood) encodings: a comprehensive study](https://www.kaggle.com/vprokopev/mean-likelihood-encodings-a-comprehensive-study)\n",
        "- [The Mechanics of Machine Learning, Chapter 6: Categorically Speaking](https://mlbook.explained.ai/catvars.html)\n",
        "\n",
        "#### Imposter Syndrome\n",
        "- [Effort Shock and Reward Shock (How The Karate Kid Ruined The Modern World)](http://www.tempobook.com/2014/07/09/effort-shock-and-reward-shock/)\n",
        "- [How to manage impostor syndrome in data science](https://towardsdatascience.com/how-to-manage-impostor-syndrome-in-data-science-ad814809f068)\n",
        "- [\"I am not a real data scientist\"](https://brohrer.github.io/imposter_syndrome.html)\n",
        "- _**[Imposter Syndrome in Data Science](https://caitlinhudon.com/2018/01/19/imposter-syndrome-in-data-science/)**_\n",
        "\n",
        "\n",
        "### More Categorical Encodings\n",
        "\n",
        "**1.** The article **[Categorical Features and Encoding in Decision Trees](https://medium.com/data-design/visiting-categorical-features-and-encoding-in-decision-trees-53400fa65931)** mentions 4 encodings:\n",
        "\n",
        "- **\"Categorical Encoding\":** This means using the raw categorical values as-is, not encoded. Scikit-learn doesn't support this, but some tree algorithm implementations do. For example, [Catboost](https://catboost.ai/), or R's [rpart](https://cran.r-project.org/web/packages/rpart/index.html) package.\n",
        "- **Numeric Encoding:** Synonymous with Label Encoding, or \"Ordinal\" Encoding with random order. We can use [category_encoders.OrdinalEncoder](https://contrib.scikit-learn.org/categorical-encoding/ordinal.html).\n",
        "- **One-Hot Encoding:** We can use [category_encoders.OneHotEncoder](http://contrib.scikit-learn.org/categorical-encoding/onehot.html).\n",
        "- **Binary Encoding:** We can use [category_encoders.BinaryEncoder](http://contrib.scikit-learn.org/categorical-encoding/binary.html).\n",
        "\n",
        "\n",
        "**2.** The short video \n",
        "**[Coursera — How to Win a Data Science Competition: Learn from Top Kagglers — Concept of mean encoding](https://www.coursera.org/lecture/competitive-data-science/concept-of-mean-encoding-b5Gxv)** introduces an interesting idea: use both X _and_ y to encode categoricals.\n",
        "\n",
        "Category Encoders has multiple implementations of this general concept:\n",
        "\n",
        "- [CatBoost Encoder](http://contrib.scikit-learn.org/categorical-encoding/catboost.html)\n",
        "- [James-Stein Encoder](http://contrib.scikit-learn.org/categorical-encoding/jamesstein.html)\n",
        "- [Leave One Out](http://contrib.scikit-learn.org/categorical-encoding/leaveoneout.html)\n",
        "- [M-estimate](http://contrib.scikit-learn.org/categorical-encoding/mestimate.html)\n",
        "- [Target Encoder](http://contrib.scikit-learn.org/categorical-encoding/targetencoder.html)\n",
        "- [Weight of Evidence](http://contrib.scikit-learn.org/categorical-encoding/woe.html)\n",
        "\n",
        "Category Encoder's mean encoding implementations work for regression problems or binary classification problems. \n",
        "\n",
        "For multi-class classification problems, you will need to temporarily reformulate it as binary classification. For example:\n",
        "\n",
        "```python\n",
        "encoder = ce.TargetEncoder(min_samples_leaf=..., smoothing=...) # Both parameters > 1 to avoid overfitting\n",
        "X_train_encoded = encoder.fit_transform(X_train, y_train=='functional')\n",
        "X_val_encoded = encoder.transform(X_train, y_val=='functional')\n",
        "```\n",
        "\n",
        "For this reason, mean encoding won't work well within pipelines for multi-class classification problems.\n",
        "\n",
        "**3.** The **[dirty_cat](https://dirty-cat.github.io/stable/)** library has a Target Encoder implementation that works with multi-class classification.\n",
        "\n",
        "```python\n",
        " dirty_cat.TargetEncoder(clf_type='multiclass-clf')\n",
        "```\n",
        "It also implements an interesting idea called [\"Similarity Encoder\" for dirty categories](https://www.slideshare.net/GaelVaroquaux/machine-learning-on-non-curated-data-154905090).\n",
        "\n",
        "However, it seems like dirty_cat doesn't handle missing values or unknown categories as well as category_encoders does. And you may need to use it with one column at a time, instead of with your whole dataframe.\n",
        "\n",
        "**4. [Embeddings](https://www.kaggle.com/learn/embeddings)** can work well with sparse / high cardinality categoricals.\n",
        "\n",
        "_**I hope it’s not too frustrating or confusing that there’s not one “canonical” way to encode categoricals. It’s an active area of research and experimentation! Maybe you can make your own contributions!**_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wq3WK3UhQ5lB",
        "colab_type": "text"
      },
      "source": [
        "### Setup\n",
        "\n",
        "You can work locally (follow the [local setup instructions](https://lambdaschool.github.io/ds/unit2/local/)) or on Colab (run the code cell below)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "o9eSnDYhUGD7",
        "colab": {}
      },
      "source": [
        "%%capture\n",
        "import sys\n",
        "\n",
        "# If you're on Colab:\n",
        "if 'google.colab' in sys.modules:\n",
        "    DATA_PATH = 'https://raw.githubusercontent.com/LambdaSchool/DS-Unit-2-Kaggle-Challenge/master/data/'\n",
        "    !pip install category_encoders==2.*\n",
        "\n",
        "# If you're working locally:\n",
        "else:\n",
        "    DATA_PATH = '../data/'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "QJBD4ruICm1m",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ed1cf785-1086-4e50-ce5e-4e2df8671ab2"
      },
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train = pd.merge(pd.read_csv(DATA_PATH+'waterpumps/train_features.csv'), \n",
        "                 pd.read_csv(DATA_PATH+'waterpumps/train_labels.csv'))\n",
        "test = pd.read_csv(DATA_PATH+'waterpumps/test_features.csv')\n",
        "sample_submission = pd.read_csv(DATA_PATH+'waterpumps/sample_submission.csv')\n",
        "\n",
        "train.shape, test.shape"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((59400, 41), (14358, 40))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sFO6BKv7Q5lK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "outputId": "6689fa52-1966-4e85-c55d-bf702255bf60"
      },
      "source": [
        "train.head()"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>amount_tsh</th>\n",
              "      <th>date_recorded</th>\n",
              "      <th>funder</th>\n",
              "      <th>gps_height</th>\n",
              "      <th>installer</th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>wpt_name</th>\n",
              "      <th>num_private</th>\n",
              "      <th>basin</th>\n",
              "      <th>subvillage</th>\n",
              "      <th>region</th>\n",
              "      <th>region_code</th>\n",
              "      <th>district_code</th>\n",
              "      <th>lga</th>\n",
              "      <th>ward</th>\n",
              "      <th>population</th>\n",
              "      <th>public_meeting</th>\n",
              "      <th>recorded_by</th>\n",
              "      <th>scheme_management</th>\n",
              "      <th>scheme_name</th>\n",
              "      <th>permit</th>\n",
              "      <th>construction_year</th>\n",
              "      <th>extraction_type</th>\n",
              "      <th>extraction_type_group</th>\n",
              "      <th>extraction_type_class</th>\n",
              "      <th>management</th>\n",
              "      <th>management_group</th>\n",
              "      <th>payment</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>water_quality</th>\n",
              "      <th>quality_group</th>\n",
              "      <th>quantity</th>\n",
              "      <th>quantity_group</th>\n",
              "      <th>source</th>\n",
              "      <th>source_type</th>\n",
              "      <th>source_class</th>\n",
              "      <th>waterpoint_type</th>\n",
              "      <th>waterpoint_type_group</th>\n",
              "      <th>status_group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>69572</td>\n",
              "      <td>6000.0</td>\n",
              "      <td>2011-03-14</td>\n",
              "      <td>Roman</td>\n",
              "      <td>1390</td>\n",
              "      <td>Roman</td>\n",
              "      <td>34.938093</td>\n",
              "      <td>-9.856322</td>\n",
              "      <td>none</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Nyasa</td>\n",
              "      <td>Mnyusi B</td>\n",
              "      <td>Iringa</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>Ludewa</td>\n",
              "      <td>Mundindi</td>\n",
              "      <td>109</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Roman</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay annually</td>\n",
              "      <td>annually</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>spring</td>\n",
              "      <td>spring</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8776</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-03-06</td>\n",
              "      <td>Grumeti</td>\n",
              "      <td>1399</td>\n",
              "      <td>GRUMETI</td>\n",
              "      <td>34.698766</td>\n",
              "      <td>-2.147466</td>\n",
              "      <td>Zahanati</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Nyamara</td>\n",
              "      <td>Mara</td>\n",
              "      <td>20</td>\n",
              "      <td>2</td>\n",
              "      <td>Serengeti</td>\n",
              "      <td>Natta</td>\n",
              "      <td>280</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>Other</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>2010</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>wug</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>34310</td>\n",
              "      <td>25.0</td>\n",
              "      <td>2013-02-25</td>\n",
              "      <td>Lottery Club</td>\n",
              "      <td>686</td>\n",
              "      <td>World vision</td>\n",
              "      <td>37.460664</td>\n",
              "      <td>-3.821329</td>\n",
              "      <td>Kwa Mahundi</td>\n",
              "      <td>0</td>\n",
              "      <td>Pangani</td>\n",
              "      <td>Majengo</td>\n",
              "      <td>Manyara</td>\n",
              "      <td>21</td>\n",
              "      <td>4</td>\n",
              "      <td>Simanjiro</td>\n",
              "      <td>Ngorika</td>\n",
              "      <td>250</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>Nyumba ya mungu pipe scheme</td>\n",
              "      <td>True</td>\n",
              "      <td>2009</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay per bucket</td>\n",
              "      <td>per bucket</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>dam</td>\n",
              "      <td>dam</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>67743</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-01-28</td>\n",
              "      <td>Unicef</td>\n",
              "      <td>263</td>\n",
              "      <td>UNICEF</td>\n",
              "      <td>38.486161</td>\n",
              "      <td>-11.155298</td>\n",
              "      <td>Zahanati Ya Nanyumbu</td>\n",
              "      <td>0</td>\n",
              "      <td>Ruvuma / Southern Coast</td>\n",
              "      <td>Mahakamani</td>\n",
              "      <td>Mtwara</td>\n",
              "      <td>90</td>\n",
              "      <td>63</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>Nanyumbu</td>\n",
              "      <td>58</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>1986</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>submersible</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>dry</td>\n",
              "      <td>dry</td>\n",
              "      <td>machine dbh</td>\n",
              "      <td>borehole</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe multiple</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>non functional</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19728</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2011-07-13</td>\n",
              "      <td>Action In A</td>\n",
              "      <td>0</td>\n",
              "      <td>Artisan</td>\n",
              "      <td>31.130847</td>\n",
              "      <td>-1.825359</td>\n",
              "      <td>Shuleni</td>\n",
              "      <td>0</td>\n",
              "      <td>Lake Victoria</td>\n",
              "      <td>Kyanyamisa</td>\n",
              "      <td>Kagera</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>Karagwe</td>\n",
              "      <td>Nyakasimbi</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>0</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>functional</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  amount_tsh  ... waterpoint_type_group    status_group\n",
              "0  69572      6000.0  ...    communal standpipe      functional\n",
              "1   8776         0.0  ...    communal standpipe      functional\n",
              "2  34310        25.0  ...    communal standpipe      functional\n",
              "3  67743         0.0  ...    communal standpipe  non functional\n",
              "4  19728         0.0  ...    communal standpipe      functional\n",
              "\n",
              "[5 rows x 41 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Iww3h_osMKV3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "outputId": "94973445-ba73-4b02-9bf2-c817c7f0395d"
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>amount_tsh</th>\n",
              "      <th>date_recorded</th>\n",
              "      <th>funder</th>\n",
              "      <th>gps_height</th>\n",
              "      <th>installer</th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>wpt_name</th>\n",
              "      <th>num_private</th>\n",
              "      <th>basin</th>\n",
              "      <th>subvillage</th>\n",
              "      <th>region</th>\n",
              "      <th>region_code</th>\n",
              "      <th>district_code</th>\n",
              "      <th>lga</th>\n",
              "      <th>ward</th>\n",
              "      <th>population</th>\n",
              "      <th>public_meeting</th>\n",
              "      <th>recorded_by</th>\n",
              "      <th>scheme_management</th>\n",
              "      <th>scheme_name</th>\n",
              "      <th>permit</th>\n",
              "      <th>construction_year</th>\n",
              "      <th>extraction_type</th>\n",
              "      <th>extraction_type_group</th>\n",
              "      <th>extraction_type_class</th>\n",
              "      <th>management</th>\n",
              "      <th>management_group</th>\n",
              "      <th>payment</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>water_quality</th>\n",
              "      <th>quality_group</th>\n",
              "      <th>quantity</th>\n",
              "      <th>quantity_group</th>\n",
              "      <th>source</th>\n",
              "      <th>source_type</th>\n",
              "      <th>source_class</th>\n",
              "      <th>waterpoint_type</th>\n",
              "      <th>waterpoint_type_group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>50785</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-02-04</td>\n",
              "      <td>Dmdd</td>\n",
              "      <td>1996</td>\n",
              "      <td>DMDD</td>\n",
              "      <td>35.290799</td>\n",
              "      <td>-4.059696</td>\n",
              "      <td>Dinamu Secondary School</td>\n",
              "      <td>0</td>\n",
              "      <td>Internal</td>\n",
              "      <td>Magoma</td>\n",
              "      <td>Manyara</td>\n",
              "      <td>21</td>\n",
              "      <td>3</td>\n",
              "      <td>Mbulu</td>\n",
              "      <td>Bashay</td>\n",
              "      <td>321</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>Parastatal</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>2012</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>parastatal</td>\n",
              "      <td>parastatal</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>seasonal</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>51630</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-02-04</td>\n",
              "      <td>Government Of Tanzania</td>\n",
              "      <td>1569</td>\n",
              "      <td>DWE</td>\n",
              "      <td>36.656709</td>\n",
              "      <td>-3.309214</td>\n",
              "      <td>Kimnyak</td>\n",
              "      <td>0</td>\n",
              "      <td>Pangani</td>\n",
              "      <td>Kimnyak</td>\n",
              "      <td>Arusha</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Arusha Rural</td>\n",
              "      <td>Kimnyaki</td>\n",
              "      <td>300</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>TPRI pipe line</td>\n",
              "      <td>True</td>\n",
              "      <td>2000</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>spring</td>\n",
              "      <td>spring</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17168</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-02-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1567</td>\n",
              "      <td>NaN</td>\n",
              "      <td>34.767863</td>\n",
              "      <td>-5.004344</td>\n",
              "      <td>Puma Secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>Internal</td>\n",
              "      <td>Msatu</td>\n",
              "      <td>Singida</td>\n",
              "      <td>13</td>\n",
              "      <td>2</td>\n",
              "      <td>Singida Rural</td>\n",
              "      <td>Puma</td>\n",
              "      <td>500</td>\n",
              "      <td>True</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2010</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>never pay</td>\n",
              "      <td>never pay</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>insufficient</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>rainwater harvesting</td>\n",
              "      <td>surface</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>45559</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2013-01-22</td>\n",
              "      <td>Finn Water</td>\n",
              "      <td>267</td>\n",
              "      <td>FINN WATER</td>\n",
              "      <td>38.058046</td>\n",
              "      <td>-9.418672</td>\n",
              "      <td>Kwa Mzee Pange</td>\n",
              "      <td>0</td>\n",
              "      <td>Ruvuma / Southern Coast</td>\n",
              "      <td>Kipindimbi</td>\n",
              "      <td>Lindi</td>\n",
              "      <td>80</td>\n",
              "      <td>43</td>\n",
              "      <td>Liwale</td>\n",
              "      <td>Mkutano</td>\n",
              "      <td>250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>VWC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>1987</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>vwc</td>\n",
              "      <td>user-group</td>\n",
              "      <td>unknown</td>\n",
              "      <td>unknown</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>dry</td>\n",
              "      <td>dry</td>\n",
              "      <td>shallow well</td>\n",
              "      <td>shallow well</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>49871</td>\n",
              "      <td>500.0</td>\n",
              "      <td>2013-03-27</td>\n",
              "      <td>Bruder</td>\n",
              "      <td>1260</td>\n",
              "      <td>BRUDER</td>\n",
              "      <td>35.006123</td>\n",
              "      <td>-10.950412</td>\n",
              "      <td>Kwa Mzee Turuka</td>\n",
              "      <td>0</td>\n",
              "      <td>Ruvuma / Southern Coast</td>\n",
              "      <td>Losonga</td>\n",
              "      <td>Ruvuma</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>Mbinga</td>\n",
              "      <td>Mbinga Urban</td>\n",
              "      <td>60</td>\n",
              "      <td>NaN</td>\n",
              "      <td>GeoData Consultants Ltd</td>\n",
              "      <td>Water Board</td>\n",
              "      <td>BRUDER</td>\n",
              "      <td>True</td>\n",
              "      <td>2000</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>gravity</td>\n",
              "      <td>water board</td>\n",
              "      <td>user-group</td>\n",
              "      <td>pay monthly</td>\n",
              "      <td>monthly</td>\n",
              "      <td>soft</td>\n",
              "      <td>good</td>\n",
              "      <td>enough</td>\n",
              "      <td>enough</td>\n",
              "      <td>spring</td>\n",
              "      <td>spring</td>\n",
              "      <td>groundwater</td>\n",
              "      <td>communal standpipe</td>\n",
              "      <td>communal standpipe</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  amount_tsh  ...     waterpoint_type waterpoint_type_group\n",
              "0  50785         0.0  ...               other                 other\n",
              "1  51630         0.0  ...  communal standpipe    communal standpipe\n",
              "2  17168         0.0  ...               other                 other\n",
              "3  45559         0.0  ...               other                 other\n",
              "4  49871       500.0  ...  communal standpipe    communal standpipe\n",
              "\n",
              "[5 rows x 40 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lnTKxgV0T16D",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_uwrd05-T7jS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train = pd.merge(pd.read_csv(DATA_PATH+'waterpumps/train_features.csv'), \n",
        "                 pd.read_csv(DATA_PATH+'waterpumps/train_labels.csv'))\n",
        "\n",
        "\n",
        "test = pd.read_csv(DATA_PATH+'waterpumps/test_features.csv')\n",
        "sample_submission = pd.read_csv(DATA_PATH+'waterpumps/sample_submission.csv')\n",
        "\n",
        "train, val = train_test_split(train, train_size=0.80, test_size=0.20, \n",
        "                              stratify=train['status_group'], random_state=42)\n",
        "\n",
        "def wrangle(X):\n",
        "\n",
        "  \n",
        "\n",
        "    X = X.copy()\n",
        "    \n",
        "\n",
        "    X['latitude'] = X['latitude'].replace(-2e-08, 0)\n",
        "    \n",
        "   \n",
        "    cols_with_zeros = ['longitude', 'latitude', 'construction_year', \n",
        "                       'gps_height', 'population']\n",
        "    for col in cols_with_zeros:\n",
        "        X[col] = X[col].replace(0, np.nan)\n",
        "        X[col+'_MISSING'] = X[col].isnull()\n",
        "            \n",
        "    duplicates = ['quantity_group', 'payment_type']\n",
        "    X = X.drop(columns=duplicates)\n",
        "    \n",
        "    \n",
        "    unusable_variance = ['recorded_by', 'id']\n",
        "    X = X.drop(columns=unusable_variance)\n",
        "    \n",
        "  \n",
        "    X['date_recorded'] = pd.to_datetime(X['date_recorded'], infer_datetime_format=True)\n",
        "    \n",
        "    \n",
        "    X['year_recorded'] = X['date_recorded'].dt.year\n",
        "    X['month_recorded'] = X['date_recorded'].dt.month\n",
        "    X['day_recorded'] = X['date_recorded'].dt.day\n",
        "    X = X.drop(columns='date_recorded')\n",
        "    \n",
        " \n",
        "    X['years'] = X['year_recorded'] - X['construction_year']\n",
        "    X['years_MISSING'] = X['years'].isnull()\n",
        "    \n",
        "    \n",
        "    return X\n",
        "\n",
        "train = wrangle(train)\n",
        "val = wrangle(val)\n",
        "test = wrangle(test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DuotSgzEaBb0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "target = 'status_group'\n",
        "\n",
        "\n",
        "train_features = train.drop(columns=[target])\n",
        "\n",
        "numeric_features = train_features.select_dtypes(include='number').columns.tolist()\n",
        "\n",
        "\n",
        "cardinality = train_features.select_dtypes(exclude='number').nunique()\n",
        "\n",
        "\n",
        "categorical_features = cardinality[cardinality <= 50].index.tolist()\n",
        "\n",
        "\n",
        "features = numeric_features + categorical_features"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X7vdX_cDaIr0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train = train[features]\n",
        "y_train = train[target]\n",
        "X_val = val[features]\n",
        "y_val = val[target]\n",
        "X_test = test[features]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qq7_-r9XaMfK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "ef241718-3981-444a-abb7-7dfefb1cc977"
      },
      "source": [
        "%%time\n",
        "\n",
        "import category_encoders as ce\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "pipeline = make_pipeline(\n",
        "    ce.OneHotEncoder(use_cat_names=True), \n",
        "    SimpleImputer(strategy='median'), \n",
        "    RandomForestClassifier(random_state=0, n_jobs=-1)\n",
        ")\n",
        "\n",
        "\n",
        "pipeline.fit(X_train, y_train)\n",
        "print('Validation Accuracy', pipeline.score(X_val, y_val))"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation Accuracy 0.8088383838383838\n",
            "CPU times: user 26.4 s, sys: 372 ms, total: 26.8 s\n",
            "Wall time: 16.1 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JlzYW0HZaYlU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e9c65fdc-4c9d-4802-c1cf-ddad9d64eed7"
      },
      "source": [
        "print('x_train shape before encoding', X_train.shape)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x_train shape before encoding (47520, 38)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n56vDknaabzZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "42a4d241-2fac-4bd9-e353-8120fc765541"
      },
      "source": [
        "encoder = pipeline.named_steps['onehotencoder']\n",
        "encoded = encoder.transform(X_train)\n",
        "print('X_train shape after encoding', encoded.shape)"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train shape after encoding (47520, 182)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-ii-wRF3aeb-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 592
        },
        "outputId": "b9f505cc-f7c5-4716-ded6-75e0aa4d6bed"
      },
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "rf = pipeline.named_steps['randomforestclassifier']\n",
        "importances = pd.Series(rf.feature_importances_, encoded.columns)\n",
        "\n",
        "\n",
        "n = 20\n",
        "plt.figure(figsize=(10,n/2))\n",
        "importances.sort_values()[-n:].plot.barh();"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dTChLTxtagvi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train = train.drop(columns=target)\n",
        "y_train = train[target]\n",
        "X_val = val.drop(columns=target)\n",
        "y_val = val[target]\n",
        "X_test = test"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s2eDyLfvajoB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "47e1eb9d-db07-42d5-e496-5e13f7090995"
      },
      "source": [
        "%%time\n",
        "\n",
        "pipeline = make_pipeline(\n",
        "    ce.OrdinalEncoder(),\n",
        "    SimpleImputer(strategy='median'),\n",
        "    RandomForestClassifier(random_state=0, n_jobs=-1)\n",
        "\n",
        ")\n",
        "\n",
        "pipeline.fit(X_train, y_train)\n",
        "print('Validation Accuracy', pipeline.score(X_val, y_val))"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation Accuracy 0.8092592592592592\n",
            "CPU times: user 19.7 s, sys: 107 ms, total: 19.8 s\n",
            "Wall time: 10.9 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "--k7D5uhawKG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "03f7f41e-ab4e-487c-c008-0ef6e34ed4e3"
      },
      "source": [
        "print('X_train shape before encoding', X_train.shape)"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train shape before encoding (47520, 45)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W_uet3RpcEIE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9669727d-acd5-4823-b6de-4aa74ec412ad"
      },
      "source": [
        "encoder = pipeline.named_steps['ordinalencoder']\n",
        "encoded = encoder.transform(X_train)\n",
        "print('X_train shape after encoding', encoded.shape)"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train shape after encoding (47520, 45)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fCoRg6lEcIBl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "feature = 'extraction_type_class'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9qBGe588cKMg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "d9a44066-b49b-4925-fd39-a28201937d70"
      },
      "source": [
        "X_train[feature].value_counts()"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "gravity         21448\n",
              "handpump        13184\n",
              "other            5193\n",
              "submersible      4894\n",
              "motorpump        2355\n",
              "rope pump         353\n",
              "wind-powered       93\n",
              "Name: extraction_type_class, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GqKWMROHcMoQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 552
        },
        "outputId": "ee448f6d-b8a6-4801-fb9e-ce95c22b3136"
      },
      "source": [
        "import seaborn as sns\n",
        "plt.figure(figsize=(16,9))\n",
        "sns.barplot(\n",
        "    x=train[feature], \n",
        "    y=train['status_group']=='functional', \n",
        "    color='grey'\n",
        ");"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n9Ttz/UdX1d+uZk3setNy/W+rXQeLU1UnVtVTV3H+/zTdb3cdUlWfrqoDd29lML6qOqOqbnYt2i/k\nN+LuMOWKF612HUsJsHuY6e+ErpXufml3v3bqfXQSARbGdLMkv7PTVit0XdYn7BZHJ7lWAdayZKkd\nvSe62waS3aRm/J7eh3T3L3T3F1e7jutqb/g+8YHbzarqf1TVxVX1vqp6Y1U9tarOrqo/qapNSX6v\nqn6pqj5UVR+tqn+oqv9SVdebtpbebG5an5zGnThN59gk65K8vqrOraoHVdVb59rfv6r+ehWe9r5i\nv6p6eVVdWFXvrKobVtVvV9XGqvpYVf1lVf1AcuWe1T+tqn+qqku37WWdvghfNL1H/iHJD22b+LT8\nT6mq86vqw1V1+7lpHTvX7qvT/dFV9Y9V9bZpHs+uqkdMjz2/qm439/iXVtWmqvpEVf3ibnzN9mlV\n9QdVdcF0e0qSZye53fT5fe7U7EZV9Zaq+ueqen1V1fTYu07L95yqOrOqfngafrX1yeo8s73ftEX9\nn6fPzyemZXO/qnr/tG4+qqpuUVVvrarzquqDVXVkVR2a5PFJfn9azveapvWuqd1ZVXXraR7bPpsf\nSnLKtK5/XVV9YJrHb0/trraXbVqHPHrq/nRV/a9pXpuq6i7T++Vfqurxc49/T1W9fVr3vLT8IL+G\nqvrB6TX62PSZfVjN7cWsqnVVdfbcQ35yO8tqJevltdN3xsbp9tPT8G3vgfdn9i8OPz499tzp/XP4\n1O6rc3XcZGfLtqoeOTedl1XVfot5FfcO02f24qp6bZILkhxSVQ+fluEFVfWcubZfrarn1+y3wVlV\ntXYafruqese0Dn9vVd1hmfn4zK+CqnpaVT156n5+Vb1r6r5Pzdb1n66qA6f3wcdryW+/qe1dp3XF\nx5L87g7mdXZVvWBaXhdU1VHT8Gt8f0zDz6/Z0VpVVZ+vq47AfG3NfufvV1XPndYb51XV46bxR0/v\nsw1JLpqGLfu5r6rH1Ox77cNJfnpBL/P3p7vddtMtyd2SnJvkBklunOSTSZ6a5OwkL55rd/NcdYGt\n30ryf6buFyR5zNR99yT/MHWfmOSpU/fZSdZN3ZXkn5OsnfrfkOSXVvt12BtvSQ5NckWSO039b0ry\nyCS3nGvzP5M8aep+dZI3Z7YR6Ygkl0zDfzXJ32f211M/kuSLSY6dxn06yR9N3Y9K8rdz0zp2bj5f\nne6Pnh7/w0nWJNmc5KRp3O8l+ZO5x79jquXwJJclucFqv6Z7+y3JXZOcn+QHk9woyYVJ7pzkgrk2\nRyf5UpKDp+XzgST3THL9JP8099l+WGZ/VbZtHfDi3f189rXb3Gf+jtOyOSfJK6f17jFJ3prkhUnW\nT+3vk+TcqfvKdfbU/zdJfsLpyEIAAA39SURBVGPqfmySt07dr07yt0n2m3vcx5LcMMmBST4zrSeO\n3rY+mNq9KMmjp+5PJ3nC1P38JOdl9v2zNsl/zL3PvpnkttO65+/n1yluV76uD0ny8rn+m06v74FT\n/7okZ69gWa1kvfyGJPecum+d5ONz0z0nyQ2n/hcmecTUfcDc8PnvgWWX7bbak/zX6T14/Wn4i5M8\narVf7z35ltnn/3tJfmrq/5Ek/zZ9rvZP8q4kvzyN67ll9KwkL5q6z0py+NR99yTvWmY+PvOrs3x/\nKsmbp+73JvlwZt+765M8bu6zc2iW+e03dZ+X5N5T93Mz992+ZF5nZ1qvJLn3tnbZ/vfHS5M8KMlP\nJNk499hPZvZ74vgkz5yGrUmyKclh0zL/WpLDpnHLfu4zWzdtey8fkOT9296ze9LN1pbd66eTvK27\nv9ndX8nsjbPNX8x1H5zkzKo6P8nTkvz4XJuHTd3HLXnMNfTsHfm6JI+s2Z7beyT5u+/7WbA9n+ru\nc6fuczJbsf3EtMXr/CSPyFXLMpn9SP1ed1+U5L9Mw+6d5I3d/d3u/mxmX4Lz3jh3f48V1LSxu/+9\nu7+V5F+SvHMafv5U3zZvmmr5ZJJLk1xjSzC73D2T/HV3f627v5rkr5Lca5l2H+7uy7r7e5ltADs0\nyY9l9uX191V1bpJnZrbe2GaH6wZ2mU919/nTsrkwyVnTenfb5+uema2D093vSnLLqrrJMtO5R2aB\nJVP7e86Ne3N3f3eu/23d/Y3u/lySdyc5agV1bpjuz0/yoe7+SndfnuRbddVRPR/u7kuneb1xSQ3M\nnJ/k/lX1nKq6V3d/aSftt7esVrJevl+SF02f7w2Z7UW90TRuQ3d/Y+r+QJL/t6qenuQ2c8Pn7WzZ\n3jezDWobp/ndN7Ngw479a3d/cOq+W2YbLy7v7iuSvD6z7/NkFnS3rZP/PMk9p2X535K8eXrNX5ZZ\ncFiOz/zud06Su07r629l9jlbl9l39HuXtL3Gb7/pNb5Zd79nGv66nczvjUkytb/J9PjtfX+8N7P3\n1r2TvCTJHavqVkm+0N1fS/JzSR41va8+lOSWme2cSGbL/FNT9/Y+93fPVe/lb2cP/T0x/DHQe5Gv\nzXW/MMnzuntDVR2d2Ra4ZPYBuv10+MkvZ7ZHb2delVlQ/mZmP4Su2GUVs9S35rq/m9kW01dnthX2\nY9PhPUdvp32tcB69TPcVmU4HmA4BOmA78/jeXP/3cvXP/9L/0/L/WnuOpe+r/TN7v1zY3dvbiPG1\n7Qxn19rZ5+s7u2AeS5flcp/VK9cBkxssaTNf19Kat60HrAN2ors/UVV3SfILSf5nVZ2Vq7/2S1/3\n7b2mK1kvXy+zvXvfnJ9Azc4guPI90d1vqNkh5g9KckZVPW76sbuSOq6cbJLXdPcfhmvjuq5nO7Pl\n+8XuvtMK2y/t95lfoO7+TlV9KrPryvxTZntTfzbJ7ZN8fEnz5X77bVdVvSqzo60+292/sG2WS0vY\nwSTek9khybdO8kdJfiXJsbkqWFdmR/uduWS+R+fq79llP/dV9cs7qn9PYQ/s7vX+JL9UVTeYtr5t\n71zDm2Z2WFGS/Ma2gdOW/b9O8rzMDif6/DKP/Upmh4pse8xnk3w2sz00r/q+nwHX1o2T/HtVXT+z\nPbA7854kD5vOYfjhzFaY8x42d/+BqfvTmW1FS5IHZ3aYy7X10JqdZ327zLbAXXwdpsG1894kv1xV\nP1BVP5jZl9D7M/f53YGLk6ytqnskSVVdv6p+fCePYfd7b6bP/fTj4XPd/eUsWU9n9gPpuKn7Ebnm\nFv55x0zfIbfMbIPYxiT/muSIqlozbbm/73Wo9aiqOmzaCPawJO+7DtPYq9XsCv9f7+4/z+yQwLvk\n6uvfhyx5yHLLaqXemeRJc/NeNuhU1W2TXNrdf5rkbUmOXKbZzpbtWUmOraofmqZ5i6q6zbWoldkh\npj8znRe5X5KHJ/nHadz1MgsYSfLfk7xvWg98qqoemlx5/Yuf3M60feZXx3szO83vPVP345N8dPot\nvkM9u8DTF6tq217tR8yNe0x332kuvCbTb7up/ZemozuW/f7o7s9kdvjy4d19aWbLbVudSXJmkidM\nvztTVT86/cZYanuf+w9l9l6+5TSNh+7s+a4Ge2B3o+7eOJ08fV6S/8js0I7lDkE6MbPDSr6Q2SGk\nh82N+4vMVl6P3s5sXp3kpVX1jST3mA4nen1m58ot3WrE4v2PzFYGl0/3Owsnf53ZuQ4XZXYOwgeW\njL95VZ2X2Ra/h0/DXp7kbTW7UMA7ct22Cv9bZl/AN0ny+KVb/dn1uvsjVfXqzF73JHlFd59Ts4sA\nXZDZ4f5v385jv12zC3f9aVXdNLN1+Z9kdhgre44Tk7xy+sx+PVdtkPybJG+pqmMyCylPSvKqqnpa\nZuuKx+xgmudldhjhgUn+eNpImap6U2YXk/lUko9eh1o3ZnYe3e2n6bvg3zXdMclzq+p7me1df0Jm\ne1v+rKr+OLNz2eZdY1lV1Y+ucF5PTnLq9N7ZP7Mfp49fpt2vJfn1qvpOki1J/v9l2uxw2Xb3RVX1\nzCTvnMLMdzLbw/OvK6x1n9fd/15Vz8js9a0kb+/ut02jv5ZZWHxmkv/MVRuiH5HkJdPw6yc5PbPz\nXZfymV8d781sD+cHuvtrVfXN7Hjj4lKPyWz937nqNIHt+WZVfTSz98Fjp2EnZvnvj2T2e3Lbhdbe\nm+R/5aoNEK/I7FSEj9TskI3LMztq82q297nv7g9W1YmZ/f78YmanLu1xagUbEtiFqupG3f3Vml2N\n9j1Jju/ujyx4ni/KbKvRny1yPixWVX06swt0fW4XT/fVmV0M4i27crrArjX9qPhqd//vXTzdozO7\nqJQrkMMuVlVf7e4b7bzlso89MT7ze7WaXbn8qd29abVrGYk9sLvfaVV1RGbnK7xmN4TXczLb+vf/\nLHI+AAAAi2YPLAAAAENwEScAAACGIMACAAAwBAEWAACAIQiwAAAADEGABWCfVFU3q6rf2YXTO7qq\n/ttc/+Or6lG7cPp3qqpf2FXTu441vHr6D2IAWBUCLAD7qpslWTbAVtV1+Zu5o5NcGWC7+6Xd/drr\nVtqy7pRkVQMsAKw2ARaAvUpVPbKqPlxV51bVy6rqNlX1yao6sKquV1XvraqfS/LsJLeb2j132oP6\n3qrakOSiaVpvrapzqurCqjp+bh4PqKqPVNXHquqsqjo0yeOT/P40vXtV1YlV9dSp/Z2q6oNVdV5V\n/XVV3XwafnZVPWeq9xNVda/tPKcDkpyc5GHT9B82Pae10/jrVdUlVbV22kv60qraNE3zF6c2+03P\nc+NUx+N28jo+varOn57js5cZ/6xpWhdU1WlVVdPwJ1fVRdM8Tp+G/cxU97lV9dGquvG1WKQAcKXr\nsoUZAPZIVfVfkzwsyU9393eq6sVJfibJc5K8JMmHk1zU3e+sqk8k+YnuvtP02KOT3GUa9qlpko/t\n7q1VdcMkG6vqLzPb+PvyJPfu7k9V1S2mNi9N8tXu/t/T9O47V9prkzypu/+xqk5Osj7JU6Zx+3f3\nUdPhweuT3G/p8+rub1fVs5Ks6+4nTtO/Q5JHJPmT6TEf6+7Lpxx5aJKjktwuybur6vZJHpXkS919\nt6pak+T9VfXOuec6/zo+MMkxSe7e3V+vqlss83K/qLtPntq/LskvJvmbJM9Iclh3f6uqbja1fWqS\n3+3u91fVjZJ8c5npAcBO2QMLwN7kvknumlnYPHfqv213vyLJTTLbS/rUHTz+w0sC3ZOr6mNJPpjk\nkCSHJ/mpJO/Z1q67t+6ooKq6aZKbdfc/ToNek+Tec03+aro/J7PguVKvzCyUJsljk7xqbtybuvt7\n3f3JJJcmuUOSn0vyqOl1+VCSW07PZzn3S/Kq7v56st3n+LNV9aGqOj/JfZL8+DT8vCSvr6pHJrli\nGvb+JM+rqidn9lpccc3JAcDO2QMLwN6kkrymu//wagOrfiDJwVPvjZJ8ZTuP/9rcY47OLMjdY9oL\neXaSG+zqgpN8a7r/bq7F93J3f6aq/qOq7pPZ3tZHzI9e2jyz1+ZJ3X3m91NsklTVDZK8OLM9wp+p\nqhNz1WvzoMwC+i8l+aOqumN3P7uq3p7ZObzvr6qf7+5//n7rAGDfYw8sAHuTs5IcW1U/lCRVdYuq\nuk1mhxC/PsmzMjv8N5mF2B2di3nTJF+YwusdMtvzmsz2xt67qg7bNo8dTa+7v5TkC3Pnt/56kn9c\n2m4Flpv+K5L8eZI3d/d354Y/dDov9nZJbpvk4iRnJnlCVV1/qvtHq+oHtzOvv0/ymCn4zz/HbbaF\n1c9NhwQfO7W7XpJDuvvdSZ6e2Wt4o6q6XXef393PSbIxsz3CAHCtCbAA7DW6+6Ikz0zyzqo6L7Mg\ndmiSuyV5Tne/Psm3q+ox3f35zPYGXlBVz11mcu9Isn9VfTyzCz59cJrH5UmOT/JX0+HFfzG1/5sk\nv7LtIk5LpvUbSZ471XSnzC7IdG29O8kR2y7iNA3bkNke5VctaftvmZ3v+3dJHt/d38ws7F6U5CNV\ndUGSl2U7e3y7+x3TtDdNhxw/dcn4L2a2IeCCzILxxmnUfkn+fDqs+KNJ/nRq+5TpdT4vyXemugDg\nWqvupUcZAQAjqKp1SZ7f3feaG/bqJH/b3W9ZtcIAYEGcAwsAA6qqZyR5Qq5+7isA7NXsgQWAPUhV\n/Xxm5+zO+1R3/8oC5nXHJK9bMvhb3X33XT0vANgVBFgAAACG4CJOAAAADEGABQAAYAgCLAAAAEMQ\nYAEAABiCAAsAAMAQ/i8rc6Y9ZFEKjwAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 1152x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZFogq9L5cNuL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "outputId": "93169465-ba9c-4bcb-d19c-850fc6648f85"
      },
      "source": [
        "X_train[feature].head(20)"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "43360        gravity\n",
              "7263         gravity\n",
              "2486        handpump\n",
              "313            other\n",
              "52726      motorpump\n",
              "8558         gravity\n",
              "2559         gravity\n",
              "54735      motorpump\n",
              "25763       handpump\n",
              "44540    submersible\n",
              "28603          other\n",
              "4372     submersible\n",
              "30666        gravity\n",
              "6431     submersible\n",
              "57420          other\n",
              "1373         gravity\n",
              "2026         gravity\n",
              "58977       handpump\n",
              "41101        gravity\n",
              "10019        gravity\n",
              "Name: extraction_type_class, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ph7dw7cbcRXq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 723
        },
        "outputId": "a57c7766-8580-4bed-a8e5-652d75c3944c"
      },
      "source": [
        "encoder = ce.OneHotEncoder(use_cat_names=True)\n",
        "encoded = encoder.fit_transform(X_train[[feature]])\n",
        "print(f'{len(encoded.columns)} columns')\n",
        "encoded.head(20)"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7 columns\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>extraction_type_class_gravity</th>\n",
              "      <th>extraction_type_class_handpump</th>\n",
              "      <th>extraction_type_class_other</th>\n",
              "      <th>extraction_type_class_motorpump</th>\n",
              "      <th>extraction_type_class_submersible</th>\n",
              "      <th>extraction_type_class_rope pump</th>\n",
              "      <th>extraction_type_class_wind-powered</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>43360</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7263</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2486</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52726</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8558</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2559</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54735</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25763</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44540</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28603</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4372</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30666</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57420</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1373</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58977</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41101</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10019</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       extraction_type_class_gravity  ...  extraction_type_class_wind-powered\n",
              "43360                              1  ...                                   0\n",
              "7263                               1  ...                                   0\n",
              "2486                               0  ...                                   0\n",
              "313                                0  ...                                   0\n",
              "52726                              0  ...                                   0\n",
              "8558                               1  ...                                   0\n",
              "2559                               1  ...                                   0\n",
              "54735                              0  ...                                   0\n",
              "25763                              0  ...                                   0\n",
              "44540                              0  ...                                   0\n",
              "28603                              0  ...                                   0\n",
              "4372                               0  ...                                   0\n",
              "30666                              1  ...                                   0\n",
              "6431                               0  ...                                   0\n",
              "57420                              0  ...                                   0\n",
              "1373                               1  ...                                   0\n",
              "2026                               1  ...                                   0\n",
              "58977                              0  ...                                   0\n",
              "41101                              1  ...                                   0\n",
              "10019                              1  ...                                   0\n",
              "\n",
              "[20 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yihmLSLzcSZo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8ea16949-343a-4c57-8271-2f6123eab2aa"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegressionCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "lr = make_pipeline(\n",
        "    ce.OneHotEncoder(use_cat_names=True), \n",
        "    SimpleImputer(), \n",
        "    StandardScaler(), \n",
        "    LogisticRegressionCV(multi_class='auto', solver='lbfgs', cv=5, n_jobs=-1)\n",
        ")\n",
        "\n",
        "lr.fit(X_train[[feature]], y_train)\n",
        "score = lr.score(X_val[[feature]], y_val)\n",
        "print('Logistic Regression, Validation Accuracy', score)"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Logistic Regression, Validation Accuracy 0.6202861952861953\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8v7k927RcWnJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "3708157b-d2b7-42de-e659-bfa7fbd29dbf"
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "dt = make_pipeline(\n",
        "    ce.OneHotEncoder(use_cat_names=True), \n",
        "    SimpleImputer(), \n",
        "    DecisionTreeClassifier(random_state=42)\n",
        ")\n",
        "\n",
        "dt.fit(X_train[[feature]], y_train)\n",
        "score = dt.score(X_val[[feature]], y_val)\n",
        "print('Decision Tree, Validation Accuracy', score)"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Decision Tree, Validation Accuracy 0.6202861952861953\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5FsYiOiScZOx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "7656fdb3-50f2-4a56-df47-45c3b015bbd0"
      },
      "source": [
        "model = lr.named_steps['logisticregressioncv']\n",
        "encoder = lr.named_steps['onehotencoder']\n",
        "encoded_columns = encoder.transform(X_val[[feature]]).columns\n",
        "coefficients = pd.Series(model.coef_[0], encoded_columns)\n",
        "coefficients.sort_values().plot.barh(color='grey');"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhsAAAD4CAYAAABFaCS4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3de5yV1Xn3/88X1HggEVHSJ22sKNES\nD+lER4wxIB6CJjExNvgjjcYDfWowidTkIY+k5hGx7ROI+cU09WcQfQkeaDWeUtRGMASR0iAMyEk8\nYMTGpIkhnuohosL1++O+Rm62ew8zw9wzA37frxev2Xvd617rWmtvva+97rVnFBGYmZmZVaVPTwdg\nZmZmOzYnG2ZmZlYpJxtmZmZWKScbZmZmViknG2ZmZlapnXo6ALPeaJ999olBgwb1dBhmZtuNpUuX\n/j4iBtY75mTDrI5BgwbR0tLS02GYmW03JP1no2O+jWJmZmaVcrJhZmZmlXKyYWZmZpVysmFmZmaV\ncrJhZmZmlXKyYWZmZpXyV1/NzKzHTZo0qadDMGDixImVtOuVDTMzM6uUkw0zMzOrlJMNMzMzq5ST\nDTMzM6uUkw0zMzOrVK9KNiT1l/TlLmxvhKSPlp6PlXRWF7bfJOmTXdVeJ2OYIWlUhe2PkHR3RW3f\nL6m5irbNzKz36FXJBtAfqJtsSOrM13RHAG8lGxExNSJu6FxodTUBPZpsmJmZ9XbdkmxIOlPSYknL\nJV0taT9JayXtI6mPpAWSRgKTgcFZ7/L8VL1A0ixgTbb1Y0lLJT0s6bxSHydLWiZphaS5kgYBY4Gv\nZXvDJF0qaXzWb5K0SNJKSXdK2ivL75c0JeN9XNKwBmPaBbgMGJ3tj84xDczjfSQ9IWlgrj5MldSS\nbZ6SdfrmOJdkHF/ayjxeJGlVjnFyneOXZFurJU2TpCwfJ2lN9nFzlh2bcS+X9JCkd7fRdT9Jt0l6\nVNLMUruN+qs7h5J2k3SzpEck3QnsVor9ZUlX5Os6tzSPb61+5PvlqXx8Tr4X7pP0lKSvSvp6jmWR\npAGl8/8xx7la0tA25ve8fI1a1q9f39ZLYWZmHVB5siHpg8Bo4JiIaAI2AscCU4AfAv8LWBMRc4AJ\nwC8ioikivpFNHA78TUQclM/HRMQRQDMwTtLeeWG6BvhcRPw5cHpEPAVMBa7I9hbUhHYDcFFEfAhY\nBZR/k8lOETEUuLCm/C0R8TpwCXBLtn8LcBNwRlY5EVgREa1XrUHAUOBTwFRJuwJ/BbwYEUcCRwJ/\nLWn/BvP4CeBU4Kgc43fqVLsyIo6MiEMpLuSnZPkE4MM51rFZNh74Sr4mw4A/1Os3fTjn4mDgAOCY\nrfQH9efwfODViPhglh1Rqr8H0BIRhwDzaTDvNQ4F/oJi7v4h2/4w8HOgfLts9xznl4HrGjUWEdMi\nojkimgcOHNiO7s3MrD26Y2XjBIqLyhJJy/P5ARFxLfAeiovf+DbOXxwR60rPx0laASwC9gUOBD4C\nPNBaLyKeaysgSXsC/SNifhZdDwwvVbkjfy6lSBLa6zo2X+TGANNLx34UEZsiYi3wJDAEGAmclfPy\nILB3jqeeE4HpEfEqNBzjcZIelLQKOB44JMtXAjMlnQm8mWULge9JGkcxF2++vbm3LI6IX0XEJmA5\nm+ekUX9Qfw6HUyRkRMTKjKvVJuCWfHwT8LE24mk1LyJeyoTuReCuLF/Flq/bv2SfDwDvkdS/HW2b\nmVkX6Y5fVy7g+oj45haF0u7A+/NpP+ClBue/UjpnBMVF9+iIeFXS/cCuXR0wsCF/bqQDcxQRT0t6\nRtLxFKsYZ5QP11anmJsLImL2tgQLkCslVwHNGcelbJ6bT1Fc6D8NXCzpsIiYLOkeij0nCyWdFBGP\nNmh+Q+nxRmCnrfRXPqdDc1jSOl9vsjkprn2ty3FtKj3fVNNnvbk3M7Nu0h0rG3OBUZLeCyBpgKT9\nKG6jzKS4FXFN1n0JaGvvwJ7A85loDKFY0YBilWN46y2I1vv1jdqLiBeB50v7Mb5IsXTfUfXav5bi\nk/mtEbGxVH567uMYTHEr4jFgNnC+pJ0z7oMk7dGgr/uAczNJK4+xVeuF+PeS+gGjsl4fYN+ImAdc\nRDGH/SQNjohVETEFWEKx0tIRdfvbigeAL2RchwIfKh3rU2rjC8C/5+On2Hy7pbPfuhmdfX6M4rbV\ni51sx8zMOqHyZCMi1gDfAuZIWklx0RxEcZ99SkTMBF6XdG5EPEvxKXu1pMvrNHcvxafqRyg2ky7K\nPtYD5wF35C2W1uX4u4DTcnNg7UbPs4HLM6Ymis2eHTUPODjbH51lsyhWaqbX1P0lsBj4CTA2Il6j\nSEzWAMskrQaupsEqQETcm2235G2X8TXHX6BI2lZTJDFL8lBf4Ka81fEQ8IOse2HO80rgjYyr3dro\nry0/pEh0HqGY76WlY68AQ3Mejmfz6/FdioTsIWCfjsRY8lqeP5Vin4yZmXUjRXhFuSvlNyeuiIhh\npbIZwN0RcVuPBdbLSXo5IvpV0O79wPiIaOnIec3NzdHS0qFTzGwb+K++9g7b8ldfJS2NiLq/O8l/\nYr4LSZpA8Y2LM7ZW18zM7J3CKxvtIOkkij0mZesi4rQK+joMuLGmeENEHNXVffWGfnsrr2yYmXWM\nVza2UX5bZJu/MdLOvlZR7CHpVj3Vr5mZ7fh6268rNzMzsx2Mkw0zMzOrlJMNMzMzq5STDTMzM6uU\nkw0zMzOrlJMNMzMzq5STDTMzM6uUkw0zMzOrlJMNMzMzq5STDTMzM6uUkw0zMzOrlJMNMzMzq5ST\nDTMzM6uU/+qrmZn1uEmTJvV0CB02ceLEng5hu+GVDTMzM6uUkw0zMzOrlJMNMzMzq5STDTMzM6uU\nkw0zMzOrVLcnG5L6S/pyF7Y3QtJHS8/HSjqrC9tvkvTJrmqvkzHMkDSqJ2Mo68l4JP2xpNvy8TmS\nrmxQ7+XujczMzBrpiZWN/kDdZENSZ76KOwJ4K9mIiKkRcUPnQqurCejRZOOdqNF7ISL+KyJ6TeJl\nZmZb12XJhqQzJS2WtFzS1ZL2k7RW0j6S+khaIGkkMBkYnPUuz5WJBZJmAWuyrR9LWirpYUnnlfo4\nWdIySSskzZU0CBgLfC3bGybpUknjs36TpEWSVkq6U9JeWX6/pCkZ7+OShjUY0y7AZcDobH90jmlg\nHu8j6QlJA/PT/lRJLdnmKVmnb45zScbxpa3M40WSVuUYJ9c5fkm2tVrSNEnK8nGS1mQfN2fZsRn3\nckkPSXp3gz7fJ+mBrLe6dT7KqwOSRkmaUTrtxDpjPSdfu/skPSXpq5K+nn0vkjQg6w2WdG++xgsk\nDcny1jl8EPhOvfglDZK0uhTHvvl6rpVU90vvkr5Rmv+GX+aXdF6OqWX9+vWNqpmZWQd1yS/1kvRB\nYDRwTES8Iekq4FhgCvBDYDGwJiLmSHocODQimvLcEcDhWbYumxwTEc9J2g1YIul2isToGmB4RKyT\nNCDrTAVejojvZnsnlEK7AbggIuZLugyYCFzYOvaIGKriFslE4MTacUXE65IuAZoj4qvZ/hDgDOD7\nec6KiFif1/xBwFBgMDBP0geAs4AXI+JISe8CFkqaUxpreR4/AZwKHBURr7ZenGtcGRGXZf0bgVOA\n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\noEXS68C/AX9bOv6CpGuA1cBv2XwboS9wU946EsVehxck/Z2k44BNwMMU893IAmBkRDwh6T8pVjfa\nnWzkWM8D7pH0ap7bVlK5l6SVFKskrYnJBcB0Sd+gmKdzs+0Nkp4m3wvZ9l8Cq/L531Hs+1iZ7411\nFHtAamOck/uLfp55ycvAmRGxTNItwAqK99WS2nPNzKxaKm7BWytJzcAVETGsVDYDuDsibuuxwLYT\nkp6iuBX0+56OZVs0NzdHS0tLT4dhtkPyX33dMUlaGhHN9Y759xOUSJpAsX/gjK3VNTMzs/Z5R6xs\nSDqJYo9J2bqIOK2Cvg6j+LZF2YaIOKqr++oN/e6ovLJhZtYx7/iVjfy2yDZ/Y6Sdfa2i+J0O3aqn\n+jUzM9sa/yE2MzMzq5STDTMzM6uUkw0zMzOrlJMNMzMzq5STDTMzM6uUkw0zMzOrlJMNMzMzq5ST\nDTMzM6uUkw0zMzOrlJMNMzMzq5STDTMzM6uUkw0zMzOrlJMNMzMzq9Q74q++mpnZliZNmtTTIWxh\n4sSJPR2CVcgrG2ZmZlYpJxtmZmZWKScbZmZmViknG2ZmZlYpJxtmZmZWqR5NNiT1l/TlLmxvhKSP\nlp6PlXRWF7bfJOmTXdVeJ2OYIWlUT8bQFkmflXRwT8dhZma9R0+vbPQH6iYbkjrztdwRwFvJRkRM\njYgbOhdaXU1AjyYb24HPAh1KNjr5WpuZ2XaikmRD0pmSFktaLulqSftJWitpH0l9JC2QNBKYDAzO\nepfnysQCSbOANdnWjyUtlfSwpPNKfZwsaZmkFZLmShoEjAW+lu0Nk3SppPFZv0nSIkkrJd0paa8s\nv1/SlIz3cUnDGoxpF+AyYHS2PzrHNDCP95H0hKSBufowVVJLtnlK1umb41yScXxpK/N4kaRVOcbJ\ndY5fkm2tljRNkrJ8nKQ12cfNWXZsxr1c0kOS3t2gzxGS5kv6V0lPSpos6Yycn1WSBme9QZJ+ln3M\nlfSnuar0GeDy7GfwVub9+5JagL9pY87OkXRlKb67JY3Ixy/nfD4s6aeShma7T0r6TOn8f83ytZIa\nfplf0nnZf8v69evbemnMzKwDujzZkPRBYDRwTEQ0ARuBY4EpwA+B/wWsiYg5wATgFxHRFBHfyCYO\nB/4mIg7K52Mi4gigGRgnae+8wF8DfC4i/hw4PSKeAqYCV2R7C2pCuwG4KCI+BKwCyhednSJiKHBh\n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\nmVn32+E2iJqZmVnv4mTDzMzMKuVkw8zMzCrlZMPMzMwq5WTDzMzMKuVkw8zMzCrl37NhVoek9cB/\n1hTvA/y+B8LpDMdane0pXsdane0p3u6Kdb+IGFjvgJMNs3aS1NLoF9b0No61OttTvI61OttTvL0h\nVt9GMTMzs0o52TAzM7NKOdkwa79pPR1ABzjW6mxP8TrW6mxP8fZ4rN6zYWZmZpXyyoaZmZlVysmG\nmZmZVcrJhlmJpAGS7pO0Nn/uVadOk6SfS3pY0kpJo0vHZkhaJ2l5/mvqxbHuL+lBSU9IukXSLj0Z\na9a7V9ILku6uKe+2ee2ieHvj3J6dddZKOrtUfr+kx0pz+94KYjw5+3hC0oQ6x9+V8/REztug0rFv\nZvljkk7q6ti6KlZJgyT9oTSPU3tBrMMlLZP0pqRRNcfqvh8qExH+53/+l/+A7wAT8vEEYEqdOgcB\nB+bjPwZ+A/TP5zOAUdtJrD8CPp+PpwLn92SseewE4NPA3TXl3TavXRRvr5pbYADwZP7cKx/vlcfu\nB5orjK8v8AvgAGAXYAVwcE2dLwNT8/HngVvy8cFZ/13A/tlO314a6yBgdTe+R9sT6yDgQ8AN5f9+\n2no/VPXPKxtmWzoVuD4fXw98trZCRDweEWvz8X8BvwPq/ta8inU6VkkCjgdua+v87ow1Y5wLvFRh\nHO3V6Xh76dyeBNwXEc9FxPPAfcDJFcZUNhR4IiKejIjXgZspYi4rj+E24IScx1OBmyNiQ0SsA57I\n9npjrN1tq7FGxFMRsRLYVHNut78fnGyYbemPIuI3+fi3wB+1VVnSUIpPFb8oFf9D3rK4QtK7KooT\nti3WvYEXIuLNPPwr4E+qCpQOxtpAd80rbFu8vXFu/wR4uvS8NqbpufT/fyq4cG6t7y3q5Ly9SDGP\n7Tm3K21LrAD7S3pI0nxJwyqMs72xVnFup+xUZeNmvZGknwL/o86hi8tPIiIkNfxuuKT3ATcCZ0dE\n6yeHb1L8D38Xiu+2XwRc1ttireKDWFfF2kCXzitUHm+XqjjWMyLi15LeDdwOfJFi2d065jfAn0bE\ns5KOAH4s6ZCI+O+eDqw3cLJh7zgRcWKjY5KekfS+iPhNXqB/16Dee4B7gIsjYlGp7dZPmBskTQfG\n99JYnwX6S9opP529H/h1T8faRttdOq/ZZlXx9sa5/TUwovT8/RR7NYiIX+fPlyT9M8XyfFcmG78G\n9q3pu3Y+Wuv8StJOwJ4U89iec7tSp2ONYjPEBoCIWCrpFxR7plp6MNa2zh1Rc+79XRJVA76NYral\nWUDrzuyzgX+trZDfLLgTuCEibqs59r78KYp756t7Y6z5P8Z5wKi2zu/OWNvSzfMK2xBvL53b2cBI\nSXvlt1VGArMl7SRpHwBJOwOn0PVzuwQ4UMU3dHah2FQ5q40xjAJ+lvM4C/h8fgNkf+BAYHEXx9cl\nsUoaKKkvgKQDMtYnezjWRuq+HyqKs1Dl7lP/87/t7R/Fvde5wFrgp8CALG8Grs3HZwJvAMtL/5ry\n2M+AVRT/w74J6NeLYz2A4n/cTwC3Au/qyVjz+QJgPfAHivvIJ3X3vHZRvL1xbsdkPE8A52bZHsBS\nYCXwMPCPVPBtD+CTwOMU+4UuzrLLgM/k411znp7IeTugdO7Fed5jwCeqfN23JVbgczmHy4FlwKd7\nQaxH5vvyFYqVoofbej9U+c+/rtzMzMwq5dsoZmZmViknG2ZmZlYpJxtmZmZWKScbZmZmViknG2Zm\nZlYpJxtmZmZWKScbZmZmVqn/H2m6ry4tJK5KAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UnBXsoQRcb5c",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 954
        },
        "outputId": "535ff4af-e819-4c0b-d5bd-fbf621b710a3"
      },
      "source": [
        "import graphviz\n",
        "from sklearn.tree import export_graphviz\n",
        "\n",
        "model = dt.named_steps['decisiontreeclassifier']\n",
        "encoder = dt.named_steps['onehotencoder']\n",
        "encoded_columns = encoder.transform(X_val[[feature]]).columns\n",
        "\n",
        "dot_data = export_graphviz(model, \n",
        "                           out_file=None, \n",
        "                           max_depth=7, \n",
        "                           feature_names=encoded_columns,\n",
        "                           class_names=model.classes_, \n",
        "                           impurity=False, \n",
        "                           filled=True, \n",
        "                           proportion=True, \n",
        "                           rounded=True)   \n",
        "display(graphviz.Source(dot_data))"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<graphviz.files.Source at 0x7fd043f08898>"
            ],
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"1067pt\" height=\"685pt\"\n viewBox=\"0.00 0.00 1067.00 685.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 681)\">\n<title>Tree</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-681 1063,-681 1063,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#f8decc\" stroke=\"#000000\" d=\"M944.5,-677C944.5,-677 725.5,-677 725.5,-677 719.5,-677 713.5,-671 713.5,-665 713.5,-665 713.5,-621 713.5,-621 713.5,-615 719.5,-609 725.5,-609 725.5,-609 944.5,-609 944.5,-609 950.5,-609 956.5,-615 956.5,-621 956.5,-621 956.5,-665 956.5,-665 956.5,-671 950.5,-677 944.5,-677\"/>\n<text text-anchor=\"middle\" x=\"835\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class_other &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"835\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 100.0%</text>\n<text text-anchor=\"middle\" x=\"835\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.543, 0.073, 0.384]</text>\n<text text-anchor=\"middle\" x=\"835\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#f5ceb2\" stroke=\"#000000\" d=\"M837,-573C837,-573 577,-573 577,-573 571,-573 565,-567 565,-561 565,-561 565,-517 565,-517 565,-511 571,-505 577,-505 577,-505 837,-505 837,-505 843,-505 849,-511 849,-517 849,-517 849,-561 849,-561 849,-567 843,-573 837,-573\"/>\n<text text-anchor=\"middle\" x=\"707\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class_motorpump &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"707\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 89.1%</text>\n<text text-anchor=\"middle\" x=\"707\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.59, 0.078, 0.332]</text>\n<text text-anchor=\"middle\" x=\"707\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M793.088,-608.9465C781.485,-599.519 768.7779,-589.1946 756.7741,-579.4415\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"758.9744,-576.7196 749.0061,-573.13 754.5602,-582.1524 758.9744,-576.7196\"/>\n<text text-anchor=\"middle\" x=\"751.5786\" y=\"-594.2973\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">True</text>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"#9d66eb\" stroke=\"#000000\" d=\"M1047,-565.5C1047,-565.5 879,-565.5 879,-565.5 873,-565.5 867,-559.5 867,-553.5 867,-553.5 867,-524.5 867,-524.5 867,-518.5 873,-512.5 879,-512.5 879,-512.5 1047,-512.5 1047,-512.5 1053,-512.5 1059,-518.5 1059,-524.5 1059,-524.5 1059,-553.5 1059,-553.5 1059,-559.5 1053,-565.5 1047,-565.5\"/>\n<text text-anchor=\"middle\" x=\"963\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 10.9%</text>\n<text text-anchor=\"middle\" x=\"963\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.159, 0.031, 0.81]</text>\n<text text-anchor=\"middle\" x=\"963\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = non functional</text>\n</g>\n<!-- 0&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>0&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M876.912,-608.9465C891.5533,-597.0504 907.9526,-583.726 922.4785,-571.9237\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"924.7786,-574.5645 930.3327,-565.5422 920.3645,-569.1317 924.7786,-574.5645\"/>\n<text text-anchor=\"middle\" x=\"927.7602\" y=\"-586.7095\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#f4caac\" stroke=\"#000000\" d=\"M708.5,-469C708.5,-469 443.5,-469 443.5,-469 437.5,-469 431.5,-463 431.5,-457 431.5,-457 431.5,-413 431.5,-413 431.5,-407 437.5,-401 443.5,-401 443.5,-401 708.5,-401 708.5,-401 714.5,-401 720.5,-407 720.5,-413 720.5,-413 720.5,-457 720.5,-457 720.5,-463 714.5,-469 708.5,-469\"/>\n<text text-anchor=\"middle\" x=\"576\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class_submersible &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"576\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 84.1%</text>\n<text text-anchor=\"middle\" x=\"576\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.603, 0.08, 0.318]</text>\n<text text-anchor=\"middle\" x=\"576\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M664.1057,-504.9465C652.2307,-495.519 639.2259,-485.1946 626.9407,-475.4415\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"628.9989,-472.6066 618.9907,-469.13 624.6464,-478.089 628.9989,-472.6066\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"#d8c1f7\" stroke=\"#000000\" d=\"M927,-461.5C927,-461.5 751,-461.5 751,-461.5 745,-461.5 739,-455.5 739,-449.5 739,-449.5 739,-420.5 739,-420.5 739,-414.5 745,-408.5 751,-408.5 751,-408.5 927,-408.5 927,-408.5 933,-408.5 939,-414.5 939,-420.5 939,-420.5 939,-449.5 939,-449.5 939,-455.5 933,-461.5 927,-461.5\"/>\n<text text-anchor=\"middle\" x=\"839\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 5.0%</text>\n<text text-anchor=\"middle\" x=\"839\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.381, 0.045, 0.574]</text>\n<text text-anchor=\"middle\" x=\"839\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = non functional</text>\n</g>\n<!-- 1&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>1&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M750.2217,-504.9465C765.3206,-493.0504 782.2324,-479.726 797.2122,-467.9237\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"799.623,-470.4802 805.3119,-461.5422 795.2909,-464.9817 799.623,-470.4802\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#f4c7a8\" stroke=\"#000000\" d=\"M568.5,-365C568.5,-365 339.5,-365 339.5,-365 333.5,-365 327.5,-359 327.5,-353 327.5,-353 327.5,-309 327.5,-309 327.5,-303 333.5,-297 339.5,-297 339.5,-297 568.5,-297 568.5,-297 574.5,-297 580.5,-303 580.5,-309 580.5,-309 580.5,-353 580.5,-353 580.5,-359 574.5,-365 568.5,-365\"/>\n<text text-anchor=\"middle\" x=\"454\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class_gravity &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"454\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 73.8%</text>\n<text text-anchor=\"middle\" x=\"454\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.611, 0.085, 0.304]</text>\n<text text-anchor=\"middle\" x=\"454\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M536.0526,-400.9465C525.0988,-391.6088 513.1127,-381.3911 501.768,-371.7203\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"503.9179,-368.9538 494.0371,-365.13 499.3767,-374.2809 503.9179,-368.9538\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"#f9e4d5\" stroke=\"#000000\" d=\"M787,-357.5C787,-357.5 611,-357.5 611,-357.5 605,-357.5 599,-351.5 599,-345.5 599,-345.5 599,-316.5 599,-316.5 599,-310.5 605,-304.5 611,-304.5 611,-304.5 787,-304.5 787,-304.5 793,-304.5 799,-310.5 799,-316.5 799,-316.5 799,-345.5 799,-345.5 799,-351.5 793,-357.5 787,-357.5\"/>\n<text text-anchor=\"middle\" x=\"699\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 10.3%</text>\n<text text-anchor=\"middle\" x=\"699\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.541, 0.042, 0.416]</text>\n<text text-anchor=\"middle\" x=\"699\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 2&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>2&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M616.2748,-400.9465C630.2139,-389.1606 645.8112,-375.9726 659.6732,-364.2519\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"662.2324,-366.6715 667.6088,-357.5422 657.7127,-361.3262 662.2324,-366.6715\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#f3c5a4\" stroke=\"#000000\" d=\"M458.5,-261C458.5,-261 181.5,-261 181.5,-261 175.5,-261 169.5,-255 169.5,-249 169.5,-249 169.5,-205 169.5,-205 169.5,-199 175.5,-193 181.5,-193 181.5,-193 458.5,-193 458.5,-193 464.5,-193 470.5,-199 470.5,-205 470.5,-205 470.5,-249 470.5,-249 470.5,-255 464.5,-261 458.5,-261\"/>\n<text text-anchor=\"middle\" x=\"320\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class_wind&#45;powered &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"320\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 28.7%</text>\n<text text-anchor=\"middle\" x=\"320\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.629, 0.059, 0.311]</text>\n<text text-anchor=\"middle\" x=\"320\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M410.1234,-296.9465C397.9765,-287.519 384.6738,-277.1946 372.1073,-267.4415\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"374.021,-264.4963 363.9752,-261.13 369.7291,-270.0262 374.021,-264.4963\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"#f4c9aa\" stroke=\"#000000\" d=\"M677,-253.5C677,-253.5 501,-253.5 501,-253.5 495,-253.5 489,-247.5 489,-241.5 489,-241.5 489,-212.5 489,-212.5 489,-206.5 495,-200.5 501,-200.5 501,-200.5 677,-200.5 677,-200.5 683,-200.5 689,-206.5 689,-212.5 689,-212.5 689,-241.5 689,-241.5 689,-247.5 683,-253.5 677,-253.5\"/>\n<text text-anchor=\"middle\" x=\"589\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 45.1%</text>\n<text text-anchor=\"middle\" x=\"589\" y=\"-223.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.599, 0.101, 0.299]</text>\n<text text-anchor=\"middle\" x=\"589\" y=\"-208.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 3&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>3&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M498.204,-296.9465C513.6461,-285.0504 530.9422,-271.726 546.2625,-259.9237\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"548.7603,-262.4176 554.5462,-253.5422 544.4883,-256.8723 548.7603,-262.4176\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#f3c4a3\" stroke=\"#000000\" d=\"M319,-157C319,-157 63,-157 63,-157 57,-157 51,-151 51,-145 51,-145 51,-101 51,-101 51,-95 57,-89 63,-89 63,-89 319,-89 319,-89 325,-89 331,-95 331,-101 331,-101 331,-145 331,-145 331,-151 325,-157 319,-157\"/>\n<text text-anchor=\"middle\" x=\"191\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class_rope pump &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"191\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 28.5%</text>\n<text text-anchor=\"middle\" x=\"191\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.631, 0.059, 0.31]</text>\n<text text-anchor=\"middle\" x=\"191\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 4&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>4&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M277.7606,-192.9465C266.0669,-183.519 253.2606,-173.1946 241.163,-163.4415\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"243.3162,-160.6816 233.3343,-157.13 238.9227,-166.1312 243.3162,-160.6816\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"#f8f3fd\" stroke=\"#000000\" d=\"M537,-149.5C537,-149.5 361,-149.5 361,-149.5 355,-149.5 349,-143.5 349,-137.5 349,-137.5 349,-108.5 349,-108.5 349,-102.5 355,-96.5 361,-96.5 361,-96.5 537,-96.5 537,-96.5 543,-96.5 549,-102.5 549,-108.5 549,-108.5 549,-137.5 549,-137.5 549,-143.5 543,-149.5 537,-149.5\"/>\n<text text-anchor=\"middle\" x=\"449\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 0.2%</text>\n<text text-anchor=\"middle\" x=\"449\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.452, 0.065, 0.484]</text>\n<text text-anchor=\"middle\" x=\"449\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = non functional</text>\n</g>\n<!-- 4&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>4&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M362.2394,-192.9465C376.9952,-181.0504 393.5225,-167.726 408.162,-155.9237\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"410.4891,-158.5433 416.0775,-149.5422 406.0957,-153.0938 410.4891,-158.5433\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#f3c5a3\" stroke=\"#000000\" d=\"M164,-53C164,-53 12,-53 12,-53 6,-53 0,-47 0,-41 0,-41 0,-12 0,-12 0,-6 6,0 12,0 12,0 164,0 164,0 170,0 176,-6 176,-12 176,-12 176,-41 176,-41 176,-47 170,-53 164,-53\"/>\n<text text-anchor=\"middle\" x=\"88\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 27.7%</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.63, 0.06, 0.31]</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 5&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>5&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M154.6861,-88.9777C144.7168,-79.6376 133.9138,-69.5163 123.9643,-60.1947\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"126.2408,-57.5314 116.5502,-53.2485 121.4548,-62.6397 126.2408,-57.5314\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"#f2bf9b\" stroke=\"#000000\" d=\"M382,-53C382,-53 206,-53 206,-53 200,-53 194,-47 194,-41 194,-41 194,-12 194,-12 194,-6 200,0 206,0 206,0 382,0 382,0 388,0 394,-6 394,-12 394,-12 394,-41 394,-41 394,-47 388,-53 382,-53\"/>\n<text text-anchor=\"middle\" x=\"294\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 0.7%</text>\n<text text-anchor=\"middle\" x=\"294\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.657, 0.037, 0.306]</text>\n<text text-anchor=\"middle\" x=\"294\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 5&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>5&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M227.3139,-88.9777C237.2832,-79.6376 248.0862,-69.5163 258.0357,-60.1947\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"260.5452,-62.6397 265.4498,-53.2485 255.7592,-57.5314 260.5452,-62.6397\"/>\n</g>\n</g>\n</svg>\n"
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rAYSbkrZcemr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 686
        },
        "outputId": "1493eacd-95d9-4e44-9c44-a291c2af3173"
      },
      "source": [
        "encoder = ce.OrdinalEncoder()\n",
        "encoded = encoder.fit_transform(X_train[[feature]])\n",
        "print(f'1 column, {encoded[feature].nunique()} unique values')\n",
        "encoded.head(20)"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1 column, 7 unique values\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>extraction_type_class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>43360</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7263</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2486</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52726</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8558</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2559</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54735</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25763</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44540</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28603</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4372</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30666</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57420</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1373</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2026</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58977</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41101</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10019</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       extraction_type_class\n",
              "43360                      1\n",
              "7263                       1\n",
              "2486                       2\n",
              "313                        3\n",
              "52726                      4\n",
              "8558                       1\n",
              "2559                       1\n",
              "54735                      4\n",
              "25763                      2\n",
              "44540                      5\n",
              "28603                      3\n",
              "4372                       5\n",
              "30666                      1\n",
              "6431                       5\n",
              "57420                      3\n",
              "1373                       1\n",
              "2026                       1\n",
              "58977                      2\n",
              "41101                      1\n",
              "10019                      1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c8hYd8ULci0Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2ec9ef00-cede-49d5-a774-a9fb8cc04a45"
      },
      "source": [
        "lr = make_pipeline(\n",
        "    ce.OrdinalEncoder(), \n",
        "    SimpleImputer(), \n",
        "    StandardScaler(), \n",
        "    LogisticRegressionCV(multi_class='auto', solver='lbfgs', cv=5, n_jobs=-1)\n",
        ")\n",
        "\n",
        "lr.fit(X_train[[feature]], y_train)\n",
        "score = lr.score(X_val[[feature]], y_val)\n",
        "print('Logistic Regression, Validation Accuracy', score)"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Logistic Regression, Validation Accuracy 0.5417508417508418\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oPreF-v7cmPz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "fa9452fa-ae01-4c4a-f585-c475afe1c79a"
      },
      "source": [
        "dt = make_pipeline(\n",
        "    ce.OrdinalEncoder(), \n",
        "    SimpleImputer(), \n",
        "    DecisionTreeClassifier(random_state=42)\n",
        ")\n",
        "\n",
        "dt.fit(X_train[[feature]], y_train)\n",
        "score = dt.score(X_val[[feature]], y_val)\n",
        "print('Decision Tree, Validation Accuracy', score)"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Decision Tree, Validation Accuracy 0.6202861952861953\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Grg_iZatcoiG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "bb2f041f-caf4-4c20-8518-cdb6669bd4dc"
      },
      "source": [
        "model = lr.named_steps['logisticregressioncv']\n",
        "encoder = lr.named_steps['ordinalencoder']\n",
        "encoded_columns = encoder.transform(X_val[[feature]]).columns\n",
        "coefficients = pd.Series(model.coef_[0], encoded_columns)\n",
        "coefficients.sort_values().plot.barh(color='grey');"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdsAAAD4CAYAAACkNUwYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAN6UlEQVR4nO3de4yldX3H8c8XtkItKiBobTEuUFtr\na0La8dZWxUvAa60NjSZaqaaxaqvRhkQMjQK1CWgvxjaK1FRRabFeWrGmIlKwhgRhVrmsKJdCLRpr\n8VKrJeLt2z/Os/a4zMC4M785s+vrlZzMzHOe8zu/57ez857nnIelujsAwDj7LXoCALCvE1sAGExs\nAWAwsQWAwcQWAAbbtugJsDkOO+yw3r59+6KnAbBX2bFjx5e6+/D1jiO2PyK2b9+e5eXlRU8DYK9S\nVZ/diHG8jAwAg4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjYAsBg\nYgsAg4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjYAsBgYgsAg4kt\nAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjYAsBgYgsAg4ktAAwmtgAw\nmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjYAsBgYgsAg4ktAAwmtgAwmNgCwGBi\nCwCDbVv0BNg7nHbaaYueAsBey5ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAM\nJrYAMJjYAsBgYgsAg4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjY\nAsBgYgsAg4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjYAsBgYgsA\ng4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjYAsBgYgsAg4ktAAwm\ntgAwmNgCwGAbGtuqOriqXryB4x1bVb8y9/ULq+q5Gzj+MVX15I0abw/n8LaqOmGRcwBgrI0+sz04\nyYqxraptezDesUm+H9vuPqu7375nU1vRMUkWGlsA9n1rim1VPaeqLq+qK6vqzVX1gKq6oaoOq6r9\nqupjVXVckjOSHD3t97rpzPRjVXV+kmunsf6xqnZU1aeq6gVzz/HEqvpEVV1VVRdV1fYkL0zy8mm8\nR1XVqVV10rT/MVV1WVVdXVX/UFWHTNsvqaozp/leX1WPWuWY7pbk9CTPnMZ/5nRMh0/371dVN1bV\n4dPZ51lVtTyN+dRpn/2n47ximsfv3cU6vqKqrpmO8YwV7n/VNNbOqjq7qmra/tKqunZ6jvOmbY+Z\n5n1lVX2yqu6xwngvmOa8fOutt97pnzEA49zl2WZV/XySZyb51e7+dlW9McljkpyZ5E1JLk9ybXd/\nuKquT/KL3X3M9Nhjk/zStO3macjnd/dXqurHk1xRVe/NLPp/neTR3X1zVR067XNWkm90959O4z1+\nbmpvT/KS7v5oVZ2e5NVJXrbruLr7YdNLxK9O8oTdj6u7v1VVr0qy1N1/MI3/oCTPTvL66TFXdfet\nU/O2J3lYkqOTXFxVP5PkuUm+1t0PraoDklxaVR+eO9b5dXxSkqcneXh331ZVh66w3H/V3adP+78j\nyVOTfCDJyUmO7O7bq+rgad+Tkvx+d19aVQcl+eYKx3h2krOTZGlpqVd4PgA2wVrObB+f5JczC+OV\n09dHdfdbktwzs7PPk+7k8ZfvFp+XVtVVSS5Lcv8kD0zyiCT/umu/7v7KnU2oqu6V5ODu/ui06Zwk\nj57b5X3Txx2ZRXKt/iazgCbJ85O8de6+v+/u73X3DUluSvKgJMclee60Lh9Pcu/peFbyhCRv7e7b\nklWP8bFV9fGquibJ45L8wrT96iTnVtVzknxn2nZpkj+vqpdmthbfueNwAGwFa3kftZKc092v/IGN\nVXdPcsT05UFJvr7K4/937jHHZhadR05nd5ckOfCHnPNa3D59/G7WdoxJku6+paq+WFWPy+ws9tnz\nd+++e2Zr85LuvmA9k02SqjowyRszO9O+papOzf+vzVMy+2XiaUlOqaqHdPcZVfXBzN5zvrSqju/u\nz6x3HgBsvLWc2V6U5ISquk+SVNWhVfWAzF5GPjfJqzJ7CTiZBfcO7x3OuVeSr06hfVBmZ7TJ7Cz3\n0VV15K7nuLPxuvtrSb46937sbyf56O77rcFK478lyTuTvLu7vzu3/bem93GPTnJUkuuSXJDkRVX1\nY9O8f7aqfmKV57owyfOmX1Lmj3GXXWH90vSy8AnTfvsluX93X5zkFZmt4UFVdXR3X9PdZya5IrMz\nbQC2oLuMbXdfm+SPkny4qq7OLBrbkzw0yZndfW6Sb1XV87r7y5mdZe2sqtetMNyHkmyrqk9ndjHV\nZdNz3JrkBUneN73E/K5p/w8kecauC6R2G+vEJK+b5nRMZhc7/bAuTvLgXRdITdvOz+xM/a277fsf\nmb0//c9JXtjd38wszNcm+URV7Uzy5qxyJt3dH5rGXp5edj5pt/v/O7NfWnZmFvErprv2T/LO6aXl\nTyZ5w7Tvy6Z1vjrJt6d5AbAFVbfrZuZV1VKSv+juR81te1uSf+ru9yxsYuu0tLTUy8vLe/z40047\nbQNnA7B3OPXUU3d099J6x9mT//Z1n1VVJyd5UX7wvVoAWJcfidhW1fGZvcc87+bufsb8hu4+I7OX\nt7Pb9t/5IZ7rIUnesdvm27v74WsdA4B9y49EbKerhdd9xfAan+uazN5DBoAk/kcEADCc2ALAYGIL\nAIOJLQAMJrYAMJjYAsBgYgsAg4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAM\nJrYAMJjYAsBgYgsAg4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjY\nAsBgYgsAg4ktAAwmtgAwmNgCwGBiCwCDiS0ADCa2ADCY2ALAYGILAIOJLQAMJrYAMJjYAsBgYgsA\ng4ktAAxW3b3oObAJlpaWenl5edHTANirVNWO7l5a7zjObAFgMLEFgMHEFgAGE1sAGExsAWAwsQWA\nwcQWAAYTWwAYTGwBYDCxBYDBxBYABhNbABhMbAFgMLEFgMHEFgAGE1sAGExsAWAwsQWAwcQWAAYT\nWwAYTGwBYDCxBYDBxBYABhNbABhMbAFgMLEFgMHEFgAGE1sAGExsAWAwsQWAwcQWAAYTWwAYTGwB\nYDCxBYDBxBYABhNbABhMbAFgMLEFgMHEFgAGE1sAGExsAWAwsQWAwcQWAAYTWwAYTGwBYDCxBYDB\nxBYABhNbABhMbAFgMLEFgMHEFgAGE1sAGExsAWAwsQWAwaq7Fz0HNkFV3Zrks4uexwY6LMmXFj2J\nLcrarMy6rM7arO7nuvse6x1k20bMhK2vuw9f9Bw2UlUtd/fSouexFVmblVmX1Vmb1VXV8kaM42Vk\nABhMbAFgMLFlb3X2oiewhVmblVmX1Vmb1W3I2rhACgAGc2YLAIOJLQAMJrZsWVV1aFVdWFU3TB8P\nWWW/E6d9bqiqE1e4//yq2jl+xptnvWtTVR+qqquq6lNVdVZV7b95sx9nPetSVXevqg9W1WemdTlj\nc2c/1gZ8z/xJVd1SVd/YvFmPU1VPrKrrqurGqjp5hfsPqKp3Tfd/vKq2z933ymn7dVV1/JqesLvd\n3LbkLclrk5w8fX5ykjNX2OfQJDdNHw+ZPj9k7v7fTPK3SXYu+ni20tokuef0sZK8N8mzFn1Mi16X\nJHdP8thpn7sl+ViSJy36mLbC2kz3PSLJ/ZJ8Y9HHsgFrsX+Sf0ty1PRnfVWSB++2z4uTnDV9/qwk\n75o+f/C0/wFJjpzG2f+untOZLVvZ05OcM31+TpLfWGGf45Nc2N1f6e6vJrkwyROTpKoOSvKHSV6z\nCXPdbOtam+7+n2mfbZn9sNlXrpTc43Xp7tu6++Ik6e5vJflEkiM2Yc6bZb3fM5d19xc2ZabjPSzJ\njd190/RnfV5m6zNvfr3ek+TxVVXT9vO6+/buvjnJjdN4d0ps2cruO/eX+z+T3HeFfX46yS1zX39u\n2pYkf5zkz5LcNmyGi7PetUlVXZDkv5J8PbMfJvuCda9LklTVwUmeluSiEZNckA1Zm33EWo7z+/t0\n93eSfC3Jvdf42DvwzzWyUFX1kSQ/ucJdp8x/0d1dVWs++6qqY5Ic3d0vn3+vZW8yam3mHnd8VR2Y\n5Nwkj8vsLGbLG70uVbUtyd8leUN337Rns1yM0WvDnhNbFqq7n7DafVX1xaq6X3d/oarul9lZ2O4+\nn+TYua+PSHJJkkcmWaqqf8/s+/w+VXVJdx+bvcTAtZl/jm9W1fsze2lsr4jtJqzL2Ulu6O7Xb8B0\nN9VmfM/sIz6f5P5zXx8xbVtpn89Nv4DdK8mX1/jYO/AyMlvZ+Ul2XQ15YpL3r7DPBUmOq6pDpqsr\nj0tyQXe/qbt/qru3J/m1JNfvTaFdgz1em6o6aPphu+ss7ilJPrMJc94Me7wuSVJVr8nsh+rLNmGu\nm21da7OPuSLJA6vqyKq6W2YXQJ2/2z7z63VCkn/p2RVS5yd51nS18pFJHpjk8rt8xkVfFebmttot\ns/dHLkpyQ5KPJDl02r6U5C1z+z0/s4sUbkzyvBXG2Z5972rkPV6bzN6ruyLJ1Ul2JvnLJNsWfUxb\nYF2OyOxCsU8nuXK6/e6ij2krrM20/bWZvT/5venjqYs+pnWux5OTXJ/Z1cSnTNtOT/Lr0+cHJnn3\ntA6XJzlq7rGnTI+7Lmu8Yt0/1wgAg3kZGQAGE1sAGExsAWAwsQWAwcQWAAYTWwAYTGwBYLD/A8eM\n35/HQbF8AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2aQqMUdrcqeL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 816
        },
        "outputId": "43088463-2bc1-45de-e692-9dcfde802dad"
      },
      "source": [
        "model = dt.named_steps['decisiontreeclassifier']\n",
        "encoder = dt.named_steps['ordinalencoder']\n",
        "encoded_columns = encoder.transform(X_val[[feature]]).columns\n",
        "\n",
        "dot_data = export_graphviz(model, \n",
        "                           out_file=None, \n",
        "                           max_depth=5, \n",
        "                           feature_names=encoded_columns,\n",
        "                           class_names=model.classes_, \n",
        "                           impurity=False, \n",
        "                           filled=True, \n",
        "                           proportion=True, \n",
        "                           rounded=True)   \n",
        "display(graphviz.Source(dot_data))"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<graphviz.files.Source at 0x7fd040298550>"
            ],
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"1167pt\" height=\"581pt\"\n viewBox=\"0.00 0.00 1167.00 581.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 577)\">\n<title>Tree</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-577 1163,-577 1163,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"#f8decc\" stroke=\"#000000\" d=\"M500,-573C500,-573 322,-573 322,-573 316,-573 310,-567 310,-561 310,-561 310,-517 310,-517 310,-511 316,-505 322,-505 322,-505 500,-505 500,-505 506,-505 512,-511 512,-517 512,-517 512,-561 512,-561 512,-567 506,-573 500,-573\"/>\n<text text-anchor=\"middle\" x=\"411\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class &lt;= 2.5</text>\n<text text-anchor=\"middle\" x=\"411\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 100.0%</text>\n<text text-anchor=\"middle\" x=\"411\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.543, 0.073, 0.384]</text>\n<text text-anchor=\"middle\" x=\"411\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"#f4c7a8\" stroke=\"#000000\" d=\"M390,-469C390,-469 212,-469 212,-469 206,-469 200,-463 200,-457 200,-457 200,-413 200,-413 200,-407 206,-401 212,-401 212,-401 390,-401 390,-401 396,-401 402,-407 402,-413 402,-413 402,-457 402,-457 402,-463 396,-469 390,-469\"/>\n<text text-anchor=\"middle\" x=\"301\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class &lt;= 1.5</text>\n<text text-anchor=\"middle\" x=\"301\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 72.9%</text>\n<text text-anchor=\"middle\" x=\"301\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.611, 0.085, 0.304]</text>\n<text text-anchor=\"middle\" x=\"301\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M374.9819,-504.9465C365.2954,-495.7884 354.7136,-485.7838 344.6603,-476.2788\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"346.7701,-473.4569 337.099,-469.13 341.961,-478.5434 346.7701,-473.4569\"/>\n<text text-anchor=\"middle\" x=\"337.7997\" y=\"-490.4202\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">True</text>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"#d0b4f5\" stroke=\"#000000\" d=\"M610,-469C610,-469 432,-469 432,-469 426,-469 420,-463 420,-457 420,-457 420,-413 420,-413 420,-407 426,-401 432,-401 432,-401 610,-401 610,-401 616,-401 622,-407 622,-413 622,-413 622,-457 622,-457 622,-463 616,-469 610,-469\"/>\n<text text-anchor=\"middle\" x=\"521\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class &lt;= 3.5</text>\n<text text-anchor=\"middle\" x=\"521\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 27.1%</text>\n<text text-anchor=\"middle\" x=\"521\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.361, 0.038, 0.601]</text>\n<text text-anchor=\"middle\" x=\"521\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = non functional</text>\n</g>\n<!-- 0&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>0&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M447.0181,-504.9465C456.7046,-495.7884 467.2864,-485.7838 477.3397,-476.2788\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"480.039,-478.5434 484.901,-469.13 475.2299,-473.4569 480.039,-478.5434\"/>\n<text text-anchor=\"middle\" x=\"484.2003\" y=\"-490.4202\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"#f4c9aa\" stroke=\"#000000\" d=\"M188,-357.5C188,-357.5 12,-357.5 12,-357.5 6,-357.5 0,-351.5 0,-345.5 0,-345.5 0,-316.5 0,-316.5 0,-310.5 6,-304.5 12,-304.5 12,-304.5 188,-304.5 188,-304.5 194,-304.5 200,-310.5 200,-316.5 200,-316.5 200,-345.5 200,-345.5 200,-351.5 194,-357.5 188,-357.5\"/>\n<text text-anchor=\"middle\" x=\"100\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 45.1%</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.599, 0.101, 0.299]</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M235.1851,-400.9465C211.1292,-388.4997 184.0513,-374.4892 160.4827,-362.2946\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"161.7878,-359.0291 151.2978,-357.5422 158.571,-365.2462 161.7878,-359.0291\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"#f3c5a3\" stroke=\"#000000\" d=\"M382,-357.5C382,-357.5 230,-357.5 230,-357.5 224,-357.5 218,-351.5 218,-345.5 218,-345.5 218,-316.5 218,-316.5 218,-310.5 224,-304.5 230,-304.5 230,-304.5 382,-304.5 382,-304.5 388,-304.5 394,-310.5 394,-316.5 394,-316.5 394,-345.5 394,-345.5 394,-351.5 388,-357.5 382,-357.5\"/>\n<text text-anchor=\"middle\" x=\"306\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 27.7%</text>\n<text text-anchor=\"middle\" x=\"306\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.63, 0.06, 0.31]</text>\n<text text-anchor=\"middle\" x=\"306\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M302.6372,-400.9465C303.1509,-390.2621 303.7199,-378.4254 304.2416,-367.5742\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"307.7396,-367.6987 304.7239,-357.5422 300.7477,-367.3625 307.7396,-367.6987\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"#9d66eb\" stroke=\"#000000\" d=\"M601,-357.5C601,-357.5 433,-357.5 433,-357.5 427,-357.5 421,-351.5 421,-345.5 421,-345.5 421,-316.5 421,-316.5 421,-310.5 427,-304.5 433,-304.5 433,-304.5 601,-304.5 601,-304.5 607,-304.5 613,-310.5 613,-316.5 613,-316.5 613,-345.5 613,-345.5 613,-351.5 607,-357.5 601,-357.5\"/>\n<text text-anchor=\"middle\" x=\"517\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 10.9%</text>\n<text text-anchor=\"middle\" x=\"517\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.159, 0.031, 0.81]</text>\n<text text-anchor=\"middle\" x=\"517\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = non functional</text>\n</g>\n<!-- 4&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>4&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M519.6903,-400.9465C519.2793,-390.2621 518.8241,-378.4254 518.4067,-367.5742\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"521.9027,-367.4002 518.0209,-357.5422 514.9079,-367.6693 521.9027,-367.4002\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"#fdf7f2\" stroke=\"#000000\" d=\"M821,-365C821,-365 643,-365 643,-365 637,-365 631,-359 631,-353 631,-353 631,-309 631,-309 631,-303 637,-297 643,-297 643,-297 821,-297 821,-297 827,-297 833,-303 833,-309 833,-309 833,-353 833,-353 833,-359 827,-365 821,-365\"/>\n<text text-anchor=\"middle\" x=\"732\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class &lt;= 4.5</text>\n<text text-anchor=\"middle\" x=\"732\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 16.2%</text>\n<text text-anchor=\"middle\" x=\"732\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.497, 0.043, 0.46]</text>\n<text text-anchor=\"middle\" x=\"732\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 4&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>4&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M590.0893,-400.9465C610.4002,-390.9354 632.7633,-379.9129 653.6112,-369.6371\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"655.3332,-372.6905 662.7555,-365.13 652.2385,-366.4117 655.3332,-372.6905\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"#d8c1f7\" stroke=\"#000000\" d=\"M710,-253.5C710,-253.5 534,-253.5 534,-253.5 528,-253.5 522,-247.5 522,-241.5 522,-241.5 522,-212.5 522,-212.5 522,-206.5 528,-200.5 534,-200.5 534,-200.5 710,-200.5 710,-200.5 716,-200.5 722,-206.5 722,-212.5 722,-212.5 722,-241.5 722,-241.5 722,-247.5 716,-253.5 710,-253.5\"/>\n<text text-anchor=\"middle\" x=\"622\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 5.0%</text>\n<text text-anchor=\"middle\" x=\"622\" y=\"-223.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.381, 0.045, 0.574]</text>\n<text text-anchor=\"middle\" x=\"622\" y=\"-208.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = non functional</text>\n</g>\n<!-- 6&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>6&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M695.9819,-296.9465C683.6325,-285.2707 669.8278,-272.219 657.5183,-260.5809\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"659.7445,-257.869 650.0734,-253.5422 654.9354,-262.9556 659.7445,-257.869\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"#f9e2d1\" stroke=\"#000000\" d=\"M930,-261C930,-261 752,-261 752,-261 746,-261 740,-255 740,-249 740,-249 740,-205 740,-205 740,-199 746,-193 752,-193 752,-193 930,-193 930,-193 936,-193 942,-199 942,-205 942,-205 942,-249 942,-249 942,-255 936,-261 930,-261\"/>\n<text text-anchor=\"middle\" x=\"841\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class &lt;= 5.5</text>\n<text text-anchor=\"middle\" x=\"841\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 11.2%</text>\n<text text-anchor=\"middle\" x=\"841\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.548, 0.042, 0.41]</text>\n<text text-anchor=\"middle\" x=\"841\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 6&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>6&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M767.6907,-296.9465C777.2891,-287.7884 787.7747,-277.7838 797.7366,-268.2788\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"800.4102,-270.5655 805.2291,-261.13 795.5779,-265.5009 800.4102,-270.5655\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"#f9e4d5\" stroke=\"#000000\" d=\"M819,-149.5C819,-149.5 643,-149.5 643,-149.5 637,-149.5 631,-143.5 631,-137.5 631,-137.5 631,-108.5 631,-108.5 631,-102.5 637,-96.5 643,-96.5 643,-96.5 819,-96.5 819,-96.5 825,-96.5 831,-102.5 831,-108.5 831,-108.5 831,-137.5 831,-137.5 831,-143.5 825,-149.5 819,-149.5\"/>\n<text text-anchor=\"middle\" x=\"731\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 10.3%</text>\n<text text-anchor=\"middle\" x=\"731\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.541, 0.042, 0.416]</text>\n<text text-anchor=\"middle\" x=\"731\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 8&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>8&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M804.9819,-192.9465C792.6325,-181.2707 778.8278,-168.219 766.5183,-156.5809\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"768.7445,-153.869 759.0734,-149.5422 763.9354,-158.9556 768.7445,-153.869\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"#f4cbad\" stroke=\"#000000\" d=\"M1039,-157C1039,-157 861,-157 861,-157 855,-157 849,-151 849,-145 849,-145 849,-101 849,-101 849,-95 855,-89 861,-89 861,-89 1039,-89 1039,-89 1045,-89 1051,-95 1051,-101 1051,-101 1051,-145 1051,-145 1051,-151 1045,-157 1039,-157\"/>\n<text text-anchor=\"middle\" x=\"950\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">extraction_type_class &lt;= 6.5</text>\n<text text-anchor=\"middle\" x=\"950\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 0.9%</text>\n<text text-anchor=\"middle\" x=\"950\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.614, 0.043, 0.343]</text>\n<text text-anchor=\"middle\" x=\"950\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 8&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>8&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M876.6907,-192.9465C886.2891,-183.7884 896.7747,-173.7838 906.7366,-164.2788\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"909.4102,-166.5655 914.2291,-157.13 904.5779,-161.5009 909.4102,-166.5655\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"#f2bf9b\" stroke=\"#000000\" d=\"M929,-53C929,-53 753,-53 753,-53 747,-53 741,-47 741,-41 741,-41 741,-12 741,-12 741,-6 747,0 753,0 753,0 929,0 929,0 935,0 941,-6 941,-12 941,-12 941,-41 941,-41 941,-47 935,-53 929,-53\"/>\n<text text-anchor=\"middle\" x=\"841\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 0.7%</text>\n<text text-anchor=\"middle\" x=\"841\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.657, 0.037, 0.306]</text>\n<text text-anchor=\"middle\" x=\"841\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = functional</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M911.5707,-88.9777C900.9173,-79.546 889.3641,-69.3178 878.7499,-59.9208\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"881.0207,-57.2566 871.2133,-53.2485 876.3806,-62.4978 881.0207,-57.2566\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"#f8f3fd\" stroke=\"#000000\" d=\"M1147,-53C1147,-53 971,-53 971,-53 965,-53 959,-47 959,-41 959,-41 959,-12 959,-12 959,-6 965,0 971,0 971,0 1147,0 1147,0 1153,0 1159,-6 1159,-12 1159,-12 1159,-41 1159,-41 1159,-47 1153,-53 1147,-53\"/>\n<text text-anchor=\"middle\" x=\"1059\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">samples = 0.2%</text>\n<text text-anchor=\"middle\" x=\"1059\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">value = [0.452, 0.065, 0.484]</text>\n<text text-anchor=\"middle\" x=\"1059\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\" fill=\"#000000\">class = non functional</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M988.4293,-88.9777C999.0827,-79.546 1010.6359,-69.3178 1021.2501,-59.9208\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"1023.6194,-62.4978 1028.7867,-53.2485 1018.9793,-57.2566 1023.6194,-62.4978\"/>\n</g>\n</g>\n</svg>\n"
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i9eY2VTkdTdx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "submission = sample_submission.copy()\n",
        "submission['status_group'] \n",
        "submission.to_csv('my_submission.csv', index=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l6JxrRWLevHf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "61c758c0-d833-4cb6-f1fd-19b091bc7bd6"
      },
      "source": [
        "!head my_awesome_submission.csv"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "id,status_group\n",
            "50785,functional\n",
            "51630,functional\n",
            "17168,functional\n",
            "45559,functional\n",
            "49871,functional\n",
            "52449,functional\n",
            "24806,functional\n",
            "28965,functional\n",
            "36301,functional\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6cVFXgPOe5Cc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "files.download('my_submission.csv')"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}